#!/usr/bin/env ruby
# encoding: utf-8

require 'fileutils'
require 'stringio'

PAGES_BRANCH = 'gh-pages'.freeze

class Repo
  attr_reader :path

  def initialize(path)
    @path = path
  end

  def dirty?
    not git('status').output.include?('working directory clean')
  end

  def exist?
    File.exist?(path)
  end

  def branches
    git('branch').output.split($/).map {|b| b[2..-1] }
  end

  def git(*args)
    if args.first != 'clone'
      args = ["--git-dir=#{@path}/.git", "--work-tree=#{@path}", *args]
    end

    run 'git', *args
  end
end

def root
  @root ||= Repo.new(File.expand_path('../..', __FILE__))
end

def pages
  @pages ||= Repo.new(File.expand_path('../field-kit-pages', root.path))
end

def die(msg)
  abort "~ \e[31m#{msg}\e[0m"
end

def step(msg)
  puts "~ \e[32m#{msg}\e[0m"
end

def run(cmd, *args)
  output = nil
  IO.popen([cmd, *args]) { |io| output = io.read }
  CommandResult.new $?.success?, output
end

class CommandResult
  def initialize(success, output)
    @success = success
    @output = output
  end

  def success?
    @success
  end

  def output
    @output
  end
end

if not root.branches.include?(PAGES_BRANCH)
  root.git('branch', PAGES_BRANCH, "origin/#{PAGES_BRANCH}")
end

# clone copy as pages repo
if not pages.exist?
  step 'Clone pages repo…'
  root.git('clone', root.path, pages.path).success? || die("Failed to clone repo to #{pages}!")
end

step 'Update pages repo…'
pages.git('fetch').success? || die("Failed to fetch changes from local origin!")
pages.git('checkout', PAGES_BRANCH).success? || die("Failed to checkout '#{PAGES_BRANCH}' branch!")
pages.git('pull', '--rebase').success? || die("Failed to update '#{PAGES_BRANCH}' repo!")

step 'Package field-kit.js…'
run 'npm', 'run-script', 'package'

# copy files over
(Dir["#{root.path}/field-kit.*"] + Dir["#{root.path}/public/*"]).each do |file|
  step "Copy #{file[root.path.size+1..-1]}…"
  FileUtils.cp_r file, pages.path
end

if pages.dirty?
  # commit files
  step 'Push changes…'
  pages.git('add', '.') || die("Failed to add copied files to index!")
  pages.git('commit', '-m', 'Updating GitHub pages.') || die("Failed to commit copied #{PAGES_BRANCH} files!")
  pages.git('push', 'origin', PAGES_BRANCH) || die("Failed to sync changes to #{PAGES_BRANCH} branch!")
  root.git('push', 'origin', "#{PAGES_BRANCH}:#{PAGES_BRANCH}") || die("Failed to push changes to #{PAGES_BRANCH} branch!")

  step 'Done.'
else
  step "No files changed."
end
