// Generated by CoffeeScript 1.3.3
(function() {
  var AmexFormatter, CardExtraField, CardField, CardFormatter, FormattedTextField, GAP, KEYS, TEMPLATE, no_ws,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TEMPLATE = "<div class=\"card-field\">\n  <div class=\"card-field-inner\">\n    <input class=\"card-field-pan\" placeholder=\"1234 5678 9012 3456\"/>\n    <div class=\"card-field-extras\">\n      <input class=\"card-field-expiry\" placeholder=\"MM/YY\"/><!--\n   --><input class=\"card-field-cvv\" placeholder=\"CCV\"/><!--\n   --><input class=\"card-field-postal-code\" placeholder=\"ZIP\"/>\n    </div>\n  </div>\n</div>";

  KEYS = {
    A: 65,
    ZERO: 48,
    NINE: 57,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    BACKSPACE: 8,
    DELETE: 46
  };

  KEYS.isDigit = function(keyCode) {
    return (this.ZERO <= keyCode && keyCode <= this.NINE);
  };

  KEYS.isDirectional = function(keyCode) {
    return keyCode === this.LEFT || keyCode === this.RIGHT || keyCode === this.UP || keyCode === this.DOWN;
  };

  GAP = ' ';

  no_ws = function(string) {
    return string.replace(/\s+/g, '');
  };

  FormattedTextField = require('./formatted_text_field');

  CardExtraField = (function() {

    function CardExtraField(cardField, element) {
      this.cardField = cardField;
      this.element = element;
      this.keyUp = __bind(this.keyUp, this);

      this.keyDown = __bind(this.keyDown, this);

      this.element.on('keydown', this.keyDown);
      this.element.on('keyup', this.keyUp);
    }

    CardExtraField.prototype.keyDown = function(event) {
      var caret;
      if (event.metaKey || event.ctrlKey) {
        return;
      }
      if (KEYS.isDirectional(event.keyCode)) {
        return;
      }
      if (KEYS.isDigit(event.keyCode) && !event.shiftKey && !event.altKey) {
        return this.alignCenter();
      } else if (event.keyCode === KEYS.DELETE) {
        caret = this.element.caret();
        if (caret.start === 0 && caret.end === this.element.val().length) {
          return this.alignLeft();
        } else if (this.element.val().length === 1 && caret.start === caret.end && caret.start === 0) {
          return this.alignLeft();
        }
      } else if (event.keyCode === KEYS.BACKSPACE) {
        caret = this.element.caret();
        if (caret.start === 0 && caret.end === this.element.val().length) {
          return this.alignLeft();
        } else if (this.element.val().length === 1 && caret.start === caret.end && caret.start === 1) {
          return this.alignLeft();
        }
      } else {
        return event.preventDefault();
      }
    };

    CardExtraField.prototype.keyUp = function(event) {};

    CardExtraField.prototype.alignCenter = function() {
      return this.element.css('text-align', 'center');
    };

    CardExtraField.prototype.alignLeft = function() {
      return this.element.css('text-align', 'left');
    };

    return CardExtraField;

  })();

  CardFormatter = (function() {

    function CardFormatter() {}

    CardFormatter.GAP_INDEXES = [3, 7, 11];

    CardFormatter.prototype.length = 16;

    CardFormatter.prototype.format = function(value) {
      var i, result, _i, _ref;
      value = no_ws(value).substring(0, this.length);
      result = '';
      for (i = _i = 0, _ref = value.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        result += value[i];
        if (__indexOf.call(this.constructor.GAP_INDEXES, i) >= 0) {
          result += GAP;
        }
      }
      return result;
    };

    CardFormatter.prototype.parse = function(text) {
      return no_ws(text);
    };

    return CardFormatter;

  })();

  AmexFormatter = (function(_super) {

    __extends(AmexFormatter, _super);

    function AmexFormatter() {
      return AmexFormatter.__super__.constructor.apply(this, arguments);
    }

    AmexFormatter.GAP_INDEXES = [3, 9];

    AmexFormatter.prototype.length = 15;

    return AmexFormatter;

  })(CardFormatter);

  CardField = (function() {

    function CardField() {
      this.onPanChanged = __bind(this.onPanChanged, this);

    }

    CardField.prototype.getElement = function() {
      return this._element || this.build();
    };

    CardField.prototype.build = function() {
      this._element = $(TEMPLATE);
      this._panField = new PanField(this, this._element.find('.card-field-pan'));
      this._panField.on('change', this.onPanChanged);
      this._panField.formatter = new CardFormatter();
      this._expiryField = new CardExtraField(this, this._element.find('.card-field-expiry'));
      this._cvvField = new CardExtraField(this, this._element.find('.card-field-cvv'));
      this._postalField = new CardExtraField(this, this._element.find('.card-field-postal-code'));
      return this._element;
    };

    CardField.prototype.onPanChanged = function() {
      return this.cardType = Juno.determineCardType(this._panField.value);
    };

    CardField.prototype.__defineGetter__('cardType', function() {
      return this._cardType;
    });

    CardField.prototype.__defineSetter__('cardType', function(cardType) {
      if (cardType === this._cardType) {
        return;
      }
      if (this._cardType) {
        this._element.removeClass("card-field-" + this._cardType);
      }
      if (cardType) {
        this._element.addClass("card-field-" + cardType);
      }
      this._cardType = cardType;
      if (cardType === Juno.CardType.AMEX) {
        return this._panField.formatter = new AmexFormatter();
      } else {
        return this._panField.formatter = new CardFormatter();
      }
    });

    return CardField;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = CardField;
  } else if (typeof window !== "undefined" && window !== null) {
    window.CardField = CardField;
  }

}).call(this);
