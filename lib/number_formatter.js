// Generated by CoffeeScript 1.6.2
(function() {
  var CEILING, CURRENCY, CurrencyDefaults, DEFAULT_COUNTRY, DEFAULT_LOCALE, DOWN, FLOOR, Formatter, HALF_DOWN, HALF_EVEN, HALF_UP, LocaleDefaults, NONE, NumberFormatter, PERCENT, RegionDefaults, StyleDefaults, UP, endsWith, isDigits, roundCeiling, roundFloor, roundHalfEven, splitLocaleComponents, startsWith,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Formatter = require('./formatter');

  CEILING = 0;

  FLOOR = 1;

  DOWN = 2;

  HALF_EVEN = 3;

  UP = 4;

  HALF_DOWN = 5;

  HALF_UP = 6;

  NONE = 0;

  CURRENCY = 1;

  PERCENT = 2;

  DEFAULT_LOCALE = 'en-US';

  DEFAULT_COUNTRY = 'US';

  isDigits = function(string) {
    return /^\d*$/.test(string);
  };

  startsWith = function(prefix, string) {
    return string.slice(0, prefix.length) === prefix;
  };

  endsWith = function(suffix, string) {
    return string.slice(string.length - suffix.length) === suffix;
  };

  splitLocaleComponents = function(locale) {
    var match, _ref, _ref1;

    match = locale.match(/^([a-z][a-z])(?:[-_]([a-z][a-z]))?$/i);
    return {
      lang: match != null ? (_ref = match[1]) != null ? _ref.toLowerCase() : void 0 : void 0,
      country: match != null ? (_ref1 = match[2]) != null ? _ref1.toUpperCase() : void 0 : void 0
    };
  };

  NumberFormatter = (function(_super) {
    __extends(NumberFormatter, _super);

    NumberFormatter.prototype._allowsFloats = null;

    NumberFormatter.prototype._alwaysShowsDecimalSeparator = null;

    NumberFormatter.prototype._countryCode = null;

    NumberFormatter.prototype._currencyCode = null;

    NumberFormatter.prototype._groupingSeparator = null;

    NumberFormatter.prototype._groupingSize = null;

    NumberFormatter.prototype._locale = null;

    NumberFormatter.prototype._maximumFractionDigits = null;

    NumberFormatter.prototype._minimumFractionDigits = null;

    NumberFormatter.prototype._maximumIntegerDigits = null;

    NumberFormatter.prototype._minimumIntegerDigits = null;

    NumberFormatter.prototype._maximum = null;

    NumberFormatter.prototype._minimum = null;

    NumberFormatter.prototype._multiplier = null;

    NumberFormatter.prototype._notANumberSymbol = null;

    NumberFormatter.prototype._nullSymbol = null;

    NumberFormatter.prototype._numberStyle = null;

    NumberFormatter.prototype._roundingMode = null;

    NumberFormatter.prototype._usesGroupingSeparator = null;

    NumberFormatter.prototype._zeroSymbol = null;

    function NumberFormatter() {
      this._locale = 'en';
      this.setNumberStyle(NONE);
    }

    NumberFormatter.prototype.allowsFloats = function() {
      return this._get('allowsFloats');
    };

    NumberFormatter.prototype.setAllowsFloats = function(allowsFloats) {
      this._allowsFloats = allowsFloats;
      return this;
    };

    NumberFormatter.prototype.alwaysShowsDecimalSeparator = function() {
      return this._get('alwaysShowsDecimalSeparator');
    };

    NumberFormatter.prototype.setAlwaysShowsDecimalSeparator = function(alwaysShowsDecimalSeparator) {
      this._alwaysShowsDecimalSeparator = alwaysShowsDecimalSeparator;
      return this;
    };

    NumberFormatter.prototype.countryCode = function() {
      return this._countryCode || DEFAULT_COUNTRY;
    };

    NumberFormatter.prototype.setCountryCode = function(countryCode) {
      this._countryCode = countryCode;
      return this;
    };

    NumberFormatter.prototype.currencyCode = function() {
      return this._get('currencyCode');
    };

    NumberFormatter.prototype.setCurrencyCode = function(currencyCode) {
      this._currencyCode = currencyCode;
      return this;
    };

    NumberFormatter.prototype.currencySymbol = function() {
      return this._get('currencySymbol');
    };

    NumberFormatter.prototype.setCurrencySymbol = function(currencySymbol) {
      this._currencySymbol = currencySymbol;
      return this;
    };

    NumberFormatter.prototype.decimalSeparator = function() {
      return this._get('decimalSeparator');
    };

    NumberFormatter.prototype.setDecimalSeparator = function(decimalSeparator) {
      this._decimalSeparator = decimalSeparator;
      return this;
    };

    NumberFormatter.prototype.groupingSeparator = function() {
      return this._get('groupingSeparator');
    };

    NumberFormatter.prototype.setGroupingSeparator = function(groupingSeparator) {
      this._groupingSeparator = groupingSeparator;
      return this;
    };

    NumberFormatter.prototype.groupingSize = function() {
      return this._get('groupingSize');
    };

    NumberFormatter.prototype.setGroupingSize = function(groupingSize) {
      this._groupingSize = groupingSize;
      return this;
    };

    NumberFormatter.prototype.locale = function() {
      return this._locale || DEFAULT_LOCALE;
    };

    NumberFormatter.prototype.setLocale = function(locale) {
      this._locale = locale;
      return this;
    };

    NumberFormatter.prototype.maximum = function() {
      return this._maximum;
    };

    NumberFormatter.prototype.setMaximum = function(max) {
      this._maximum = max;
      return this;
    };

    NumberFormatter.prototype.minimum = function() {
      return this._minimum;
    };

    NumberFormatter.prototype.setMinimum = function(min) {
      this._minimum = min;
      return this;
    };

    NumberFormatter.prototype.maximumFractionDigits = function() {
      return this._get('maximumFractionDigits');
    };

    NumberFormatter.prototype.setMaximumFractionDigits = function(maximumFractionDigits) {
      this._maximumFractionDigits = maximumFractionDigits;
      return this;
    };

    NumberFormatter.prototype.minimumFractionDigits = function() {
      return this._get('minimumFractionDigits');
    };

    NumberFormatter.prototype.setMinimumFractionDigits = function(minimumFractionDigits) {
      this._minimumFractionDigits = minimumFractionDigits;
      return this;
    };

    NumberFormatter.prototype.maximumIntegerDigits = function() {
      return this._get('maximumIntegerDigits');
    };

    NumberFormatter.prototype.setMaximumIntegerDigits = function(maximumIntegerDigits) {
      this._maximumIntegerDigits = maximumIntegerDigits;
      return this;
    };

    NumberFormatter.prototype.minimumIntegerDigits = function() {
      return this._get('minimumIntegerDigits');
    };

    NumberFormatter.prototype.setMinimumIntegerDigits = function(minimumIntegerDigits) {
      this._minimumIntegerDigits = minimumIntegerDigits;
      return this;
    };

    NumberFormatter.prototype.multiplier = function() {
      return this._get('multiplier');
    };

    NumberFormatter.prototype.setMultiplier = function(multiplier) {
      this._multiplier = multiplier;
      return this;
    };

    NumberFormatter.prototype.negativeInfinitySymbol = function() {
      return this._get('negativeInfinitySymbol');
    };

    NumberFormatter.prototype.setNegativeInfinitySymbol = function(negativeInfinitySymbol) {
      return this._negativeInfinitySymbol = negativeInfinitySymbol;
    };

    NumberFormatter.prototype.negativePrefix = function() {
      return this._get('negativePrefix');
    };

    NumberFormatter.prototype.setNegativePrefix = function(prefix) {
      this._negativePrefix = prefix;
      return this;
    };

    NumberFormatter.prototype.negativeSuffix = function() {
      return this._get('negativeSuffix');
    };

    NumberFormatter.prototype.setNegativeSuffix = function(prefix) {
      this._negativeSuffix = prefix;
      return this;
    };

    NumberFormatter.prototype.notANumberSymbol = function() {
      return this._get('notANumberSymbol');
    };

    NumberFormatter.prototype.setNotANumberSymbol = function(notANumberSymbol) {
      return this._notANumberSymbol = notANumberSymbol;
    };

    NumberFormatter.prototype.nullSymbol = function() {
      return this._get('nullSymbol');
    };

    NumberFormatter.prototype.setNullSymbol = function(nullSymbol) {
      return this._nullSymbol = nullSymbol;
    };

    NumberFormatter.prototype.numberStyle = function() {
      return this._numberStyle;
    };

    NumberFormatter.prototype.setNumberStyle = function(numberStyle) {
      this._numberStyle = numberStyle;
      switch (this._numberStyle) {
        case NONE:
          this._styleDefaults = StyleDefaults.NONE;
          break;
        case PERCENT:
          this._styleDefaults = StyleDefaults.PERCENT;
          break;
        case CURRENCY:
          this._styleDefaults = StyleDefaults.CURRENCY;
          break;
        default:
          this._styleDefaults = null;
      }
      return this;
    };

    NumberFormatter.prototype.percentSymbol = function() {
      return this._get('percentSymbol');
    };

    NumberFormatter.prototype.setPercentSymbol = function(percentSymbol) {
      this._percentSymbol = percentSymbol;
      return this;
    };

    NumberFormatter.prototype.positiveInfinitySymbol = function() {
      return this._get('positiveInfinitySymbol');
    };

    NumberFormatter.prototype.setPositiveInfinitySymbol = function(positiveInfinitySymbol) {
      this._positiveInfinitySymbol = positiveInfinitySymbol;
      return this;
    };

    NumberFormatter.prototype.positivePrefix = function() {
      return this._get('positivePrefix');
    };

    NumberFormatter.prototype.setPositivePrefix = function(prefix) {
      this._positivePrefix = prefix;
      return this;
    };

    NumberFormatter.prototype.positiveSuffix = function() {
      return this._get('positiveSuffix');
    };

    NumberFormatter.prototype.setPositiveSuffix = function(prefix) {
      this._positiveSuffix = prefix;
      return this;
    };

    NumberFormatter.prototype.roundingMode = function() {
      return this._get('roundingMode');
    };

    NumberFormatter.prototype.setRoundingMode = function(roundingMode) {
      this._roundingMode = roundingMode;
      return this;
    };

    NumberFormatter.prototype.usesGroupingSeparator = function() {
      return this._get('usesGroupingSeparator');
    };

    NumberFormatter.prototype.setUsesGroupingSeparator = function(usesGroupingSeparator) {
      return this._usesGroupingSeparator = usesGroupingSeparator;
    };

    NumberFormatter.prototype.zeroSymbol = function() {
      return this._get('zeroSymbol');
    };

    NumberFormatter.prototype.setZeroSymbol = function(zeroSymbol) {
      return this._zeroSymbol = zeroSymbol;
    };

    NumberFormatter.prototype._get = function(attr) {
      var localeDefaults, regionDefaults, styleDefaults, value, _ref, _ref1, _ref2, _ref3, _ref4;

      value = this["_" + attr];
      if (value != null) {
        return value;
      }
      styleDefaults = this._styleDefaults;
      localeDefaults = this._localeDefaults();
      regionDefaults = this._regionDefaults();
      value = styleDefaults != null ? styleDefaults[attr] : void 0;
      value = (_ref = typeof value === "function" ? value(this, localeDefaults) : void 0) != null ? _ref : value;
      if (value != null) {
        return value;
      }
      value = localeDefaults != null ? localeDefaults[attr] : void 0;
      value = (_ref1 = typeof value === "function" ? value(this, styleDefaults) : void 0) != null ? _ref1 : value;
      if (value != null) {
        return value;
      }
      value = regionDefaults != null ? regionDefaults[attr] : void 0;
      value = (_ref2 = typeof value === "function" ? value(this, styleDefaults) : void 0) != null ? _ref2 : value;
      if (value != null) {
        return value;
      }
      value = (_ref3 = this._currencyDefaults()) != null ? _ref3[attr] : void 0;
      value = (_ref4 = typeof value === "function" ? value(this, localeDefaults) : void 0) != null ? _ref4 : value;
      if (value != null) {
        return value;
      }
      return null;
    };

    NumberFormatter.prototype.format = function(number) {
      var copiedCharacterCount, fractionPart, i, integerPart, integerPartWithGroupingSeparators, maximumFractionDigits, maximumIntegerDigits, minimumFractionDigits, minimumIntegerDigits, multiplier, negative, negativeInfinitySymbol, notANumberSymbol, nullSymbol, positiveInfinitySymbol, result, splitNumber, string, zeroSymbol, _i, _ref;

      if (((zeroSymbol = this.zeroSymbol()) != null) && number === 0) {
        return zeroSymbol;
      }
      if (((nullSymbol = this.nullSymbol()) != null) && number === null) {
        return nullSymbol;
      }
      if (((notANumberSymbol = this.notANumberSymbol()) != null) && isNaN(number)) {
        return notANumberSymbol;
      }
      if (((positiveInfinitySymbol = this.positiveInfinitySymbol()) != null) && number === Infinity) {
        return positiveInfinitySymbol;
      }
      if (((negativeInfinitySymbol = this.negativeInfinitySymbol()) != null) && number === -Infinity) {
        return negativeInfinitySymbol;
      }
      if ((multiplier = this.multiplier()) != null) {
        number *= multiplier;
      }
      integerPart = null;
      fractionPart = null;
      string = null;
      negative = number < 0;
      splitNumber = function() {
        var _ref;

        string = "" + (Math.abs(number));
        _ref = string.split('.'), integerPart = _ref[0], fractionPart = _ref[1];
        return fractionPart || (fractionPart = '');
      };
      splitNumber();
      maximumFractionDigits = this.maximumFractionDigits();
      if (fractionPart.length > maximumFractionDigits) {
        number = this._round(number);
        splitNumber();
      }
      minimumFractionDigits = this.minimumFractionDigits();
      while (fractionPart.length < minimumFractionDigits) {
        fractionPart += '0';
      }
      minimumIntegerDigits = this.minimumIntegerDigits();
      while (integerPart.length < minimumIntegerDigits) {
        integerPart = '0' + integerPart;
      }
      minimumFractionDigits = this.minimumFractionDigits();
      while (fractionPart.length > minimumFractionDigits && fractionPart.slice(-1) === '0') {
        fractionPart = fractionPart.slice(0, -1);
      }
      maximumIntegerDigits = this.maximumIntegerDigits();
      if ((maximumIntegerDigits != null) && integerPart.length > maximumIntegerDigits) {
        integerPart = integerPart.slice(-maximumIntegerDigits);
      }
      if (fractionPart.length > 0 || this.alwaysShowsDecimalSeparator()) {
        fractionPart = this.decimalSeparator() + fractionPart;
      }
      if (this.usesGroupingSeparator()) {
        integerPartWithGroupingSeparators = '';
        copiedCharacterCount = 0;
        for (i = _i = _ref = integerPart.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          if (copiedCharacterCount > 0 && copiedCharacterCount % this.groupingSize() === 0) {
            if (this.locale() === 'fr-CA') {
              console.log(this.groupingSeparator());
            }
            integerPartWithGroupingSeparators = this.groupingSeparator() + integerPartWithGroupingSeparators;
          }
          integerPartWithGroupingSeparators = integerPart[i] + integerPartWithGroupingSeparators;
          copiedCharacterCount++;
        }
        integerPart = integerPartWithGroupingSeparators;
      }
      result = integerPart + fractionPart;
      if (negative) {
        result = this.negativePrefix() + result + this.negativeSuffix();
      } else {
        result = this.positivePrefix() + result + this.positiveSuffix();
      }
      return result;
    };

    NumberFormatter.prototype._round = function(number) {
      return this._rounder()(number, this.maximumFractionDigits());
    };

    NumberFormatter.prototype._rounder = function() {
      switch (this.roundingMode()) {
        case CEILING:
          return roundCeiling;
        case FLOOR:
          return roundFloor;
        case HALF_EVEN:
          return roundHalfEven;
      }
    };

    NumberFormatter.prototype.parse = function(string, error) {
      var result;

      if ((this.zeroSymbol() != null) && string === this.zeroSymbol()) {
        result = 0;
      } else if ((this.nullSymbol() != null) && string === this.nullSymbol()) {
        result = null;
      } else if ((this.notANumberSymbol() != null) && string === this.notANumberSymbol()) {
        result = NaN;
      } else if ((this.positiveInfinitySymbol() != null) && string === this.positiveInfinitySymbol()) {
        result = Infinity;
      } else if ((this.negativeInfinitySymbol() != null) && string === this.negativeInfinitySymbol()) {
        result = -Infinity;
      } else if (result == null) {
        if (startsWith(this.negativePrefix(), string) && endsWith(this.negativeSuffix(), string)) {
          result = this._parseAbsoluteValue(string.slice(this.negativePrefix().length, string.length - this.negativeSuffix().length), error);
          if (result != null) {
            result *= -1;
          }
        } else if (startsWith(this.positivePrefix(), string) && endsWith(this.positiveSuffix(), string)) {
          result = this._parseAbsoluteValue(string.slice(this.positivePrefix().length, string.length - this.positiveSuffix().length), error);
        } else {
          if (typeof error === "function") {
            error('number-formatter.invalid-format');
          }
          return null;
        }
      }
      if (result != null) {
        if ((this._minimum != null) && result < this._minimum) {
          if (typeof error === "function") {
            error('number-formatter.out-of-bounds.below-minimum');
          }
          return null;
        }
        if ((this._maximum != null) && result > this._maximum) {
          if (typeof error === "function") {
            error('number-formatter.out-of-bounds.above-maximum');
          }
          return null;
        }
      }
      return result;
    };

    NumberFormatter.prototype._parseAbsoluteValue = function(string, error) {
      var fractionPart, integerPart, multiplier, number, parts;

      if (string.length === 0) {
        if (typeof error === "function") {
          error('number-formatter.invalid-format');
        }
        return null;
      }
      parts = string.split(this.decimalSeparator());
      if (parts.length > 2) {
        if (typeof error === "function") {
          error('number-formatter.invalid-format');
        }
        return null;
      }
      integerPart = parts[0];
      fractionPart = parts[1] || '';
      if (!isDigits(integerPart) || !isDigits(fractionPart)) {
        if (typeof error === "function") {
          error('number-formatter.invalid-format');
        }
        return null;
      }
      number = Number(integerPart) + Number("." + (fractionPart || '0'));
      if (!this.allowsFloats() && number !== ~~number) {
        if (typeof error === "function") {
          error('number-formatter.floats-not-allowed');
        }
        return null;
      }
      if ((multiplier = this.multiplier()) != null) {
        number /= multiplier;
      }
      return number;
    };

    NumberFormatter.prototype._currencyDefaults = function() {
      var key, result, value, _ref, _ref1;

      result = {};
      _ref = CurrencyDefaults["default"];
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        result[key] = value;
      }
      _ref1 = CurrencyDefaults[this.currencyCode()];
      for (key in _ref1) {
        if (!__hasProp.call(_ref1, key)) continue;
        value = _ref1[key];
        result[key] = value;
      }
      return result;
    };

    NumberFormatter.prototype._regionDefaults = function() {
      var key, result, value, _ref, _ref1;

      result = {};
      _ref = RegionDefaults["default"];
      for (key in _ref) {
        if (!__hasProp.call(_ref, key)) continue;
        value = _ref[key];
        result[key] = value;
      }
      _ref1 = RegionDefaults[this.countryCode()];
      for (key in _ref1) {
        if (!__hasProp.call(_ref1, key)) continue;
        value = _ref1[key];
        result[key] = value;
      }
      return result;
    };

    NumberFormatter.prototype._localeDefaults = function() {
      var countryCode, defaultFallbacks, defaults, key, lang, locale, result, value, _i, _len;

      locale = this.locale();
      countryCode = this.countryCode();
      lang = splitLocaleComponents(locale).lang;
      result = {};
      defaultFallbacks = [RegionDefaults["default"], LocaleDefaults["default"], RegionDefaults[countryCode], LocaleDefaults[lang], LocaleDefaults[locale]];
      for (_i = 0, _len = defaultFallbacks.length; _i < _len; _i++) {
        defaults = defaultFallbacks[_i];
        for (key in defaults) {
          if (!__hasProp.call(defaults, key)) continue;
          value = defaults[key];
          result[key] = value;
        }
      }
      return result;
    };

    return NumberFormatter;

  })(Formatter);

  NumberFormatter.prototype.stringFromNumber = NumberFormatter.prototype.format;

  NumberFormatter.prototype.numberFromString = NumberFormatter.prototype.parse;

  NumberFormatter.prototype.minusSign = NumberFormatter.prototype.negativePrefix;

  NumberFormatter.prototype.setMinusSign = NumberFormatter.prototype.setNegativePrefix;

  NumberFormatter.prototype.plusSign = NumberFormatter.prototype.positivePrefix;

  NumberFormatter.prototype.setPlusSign = NumberFormatter.prototype.setPositivePrefix;

  roundCeiling = function(number, maximumFractionDigits) {
    var multiplier;

    if (number < 0) {
      return roundFloor(-number, maximumFractionDigits);
    }
    multiplier = Math.pow(10, maximumFractionDigits);
    return (~~(number * multiplier) + 1) / multiplier;
  };

  roundFloor = function(number, maximumFractionDigits) {
    var multiplier;

    if (number < 0) {
      return roundCeiling(-number, maximumFractionDigits);
    }
    multiplier = Math.pow(10, maximumFractionDigits);
    return ~~(number * multiplier) / multiplier;
  };

  roundHalfEven = function(number, maximumFractionDigits) {
    var lastDigit, multiplier, percentFromFloor;

    multiplier = Math.pow(10, maximumFractionDigits);
    percentFromFloor = Math.abs((number * (multiplier * 100)) % 100);
    if (percentFromFloor < 50) {
      return roundFloor(number, maximumFractionDigits);
    } else if (percentFromFloor > 50) {
      return roundCeiling(number, maximumFractionDigits);
    } else {
      lastDigit = ~~Math.abs(number * multiplier) % 10;
      if ((lastDigit % 2 === 0) ^ (number < 0)) {
        return roundFloor(number, maximumFractionDigits);
      } else {
        return roundCeiling(number, maximumFractionDigits);
      }
    }
  };

  NumberFormatter.Rounding = {
    CEILING: CEILING,
    FLOOR: FLOOR,
    DOWN: DOWN,
    HALF_EVEN: HALF_EVEN,
    UP: UP,
    HALF_DOWN: HALF_DOWN,
    HALF_UP: HALF_UP
  };

  NumberFormatter.Style = {
    NONE: NONE,
    CURRENCY: CURRENCY,
    PERCENT: PERCENT
  };

  StyleDefaults = {
    NONE: {
      usesGroupingSeparator: false,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
      minimumIntegerDigits: 0
    },
    PERCENT: {
      usesGroupingSeparator: false,
      multiplier: 100,
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
      minimumIntegerDigits: 0,
      positiveSuffix: function(formatter) {
        return formatter.percentSymbol();
      },
      negativeSuffix: function(formatter) {
        return formatter.percentSymbol();
      }
    },
    CURRENCY: {
      positivePrefix: function(formatter) {
        return formatter.currencySymbol();
      },
      negativePrefix: function(formatter, region) {
        return region != null ? typeof region.negativeCurrencyPrefix === "function" ? region.negativeCurrencyPrefix(formatter, this) : void 0 : void 0;
      },
      negativeSuffix: function(formatter, region) {
        return region != null ? typeof region.negativeCurrencySuffix === "function" ? region.negativeCurrencySuffix(formatter, this) : void 0 : void 0;
      }
    }
  };

  LocaleDefaults = {
    "default": {
      allowsFloats: true,
      alwaysShowsDecimalSeparator: false,
      decimalSeparator: '.',
      groupingSeparator: ',',
      groupingSize: 3,
      negativeInfinitySymbol: '-∞',
      negativePrefix: '-',
      negativeSuffix: '',
      notANumberSymbol: 'NaN',
      nullSymbol: '',
      percentSymbol: '%',
      positiveInfinitySymbol: '+∞',
      positivePrefix: '',
      positiveSuffix: '',
      roundingMode: HALF_EVEN,
      positiveCurrencyPrefix: function(formatter) {
        return formatter.currencySymbol();
      },
      negativeCurrencyPrefix: function(formatter) {
        return "(" + (formatter.currencySymbol());
      },
      negativeCurrencySuffix: function(formatter) {
        return ')';
      }
    },
    fr: {
      percentSymbol: ' %',
      groupingSeparator: ' '
    }
  };

  RegionDefaults = {
    CA: {
      currencyCode: 'CAD'
    },
    DE: {
      currencyCode: 'EUR'
    },
    ES: {
      currencyCode: 'EUR'
    },
    FR: {
      currencyCode: 'EUR'
    },
    GB: {
      currencyCode: 'GBP'
    },
    JP: {
      currencyCode: 'JPY'
    },
    US: {
      currencyCode: 'USD'
    }
  };

  CurrencyDefaults = {
    "default": {
      currencySymbol: function(formatter) {
        return formatter.currencyCode();
      },
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
      minimumIntegerDigits: 1,
      usesGroupingSeparator: true
    },
    CAD: {
      currencySymbol: '$'
    },
    EUR: {
      currencySymbol: '€'
    },
    GBP: {
      currencySymbol: '£'
    },
    JPY: {
      currencySymbol: '¥',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    },
    USD: {
      currencySymbol: '$'
    }
  };

  module.exports = NumberFormatter;

}).call(this);
