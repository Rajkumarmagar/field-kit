// Generated by CoffeeScript 1.4.0
(function() {
  var CEILING, DOWN, FLOOR, Formatter, HALF_DOWN, HALF_EVEN, HALF_UP, NumberFormatter, UP, roundCeiling, roundFloor, roundHalfEven,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Formatter = require('./formatter');

  CEILING = 0;

  FLOOR = 1;

  DOWN = 2;

  HALF_EVEN = 3;

  UP = 4;

  HALF_DOWN = 5;

  HALF_UP = 6;

  NumberFormatter = (function(_super) {

    __extends(NumberFormatter, _super);

    function NumberFormatter() {
      return NumberFormatter.__super__.constructor.apply(this, arguments);
    }

    NumberFormatter.prototype._alwaysShowsDecimalSeparator = false;

    NumberFormatter.prototype._decimalSeparator = '.';

    NumberFormatter.prototype._maximumFractionDigits = 0;

    NumberFormatter.prototype._minimumFractionDigits = 0;

    NumberFormatter.prototype._negativePrefix = '-';

    NumberFormatter.prototype._negativeSuffix = '';

    NumberFormatter.prototype._positivePrefix = '';

    NumberFormatter.prototype._positiveSuffix = '';

    NumberFormatter.prototype._roundingMode = HALF_EVEN;

    NumberFormatter.prototype.alwaysShowsDecimalSeparator = function() {
      return this._alwaysShowsDecimalSeparator;
    };

    NumberFormatter.prototype.setAlwaysShowsDecimalSeparator = function(alwaysShowsDecimalSeparator) {
      return this._alwaysShowsDecimalSeparator = alwaysShowsDecimalSeparator;
    };

    NumberFormatter.prototype.decimalSeparator = function() {
      return this._decimalSeparator;
    };

    NumberFormatter.prototype.setDecimalSeparator = function(decimalSeparator) {
      return this._decimalSeparator = decimalSeparator;
    };

    NumberFormatter.prototype.maximumFractionDigits = function() {
      return this._maximumFractionDigits;
    };

    NumberFormatter.prototype.setMaximumFractionDigits = function(maximumFractionDigits) {
      this._maximumFractionDigits = maximumFractionDigits;
      return null;
    };

    NumberFormatter.prototype.minimumFractionDigits = function() {
      return this._minimumFractionDigits;
    };

    NumberFormatter.prototype.setMinimumFractionDigits = function(minimumFractionDigits) {
      this._minimumFractionDigits = minimumFractionDigits;
      return null;
    };

    NumberFormatter.prototype.negativePrefix = function() {
      return this._negativePrefix;
    };

    NumberFormatter.prototype.setNegativePrefix = function(prefix) {
      return this._negativePrefix = prefix;
    };

    NumberFormatter.prototype.negativeSuffix = function() {
      return this._negativeSuffix;
    };

    NumberFormatter.prototype.setNegativeSuffix = function(prefix) {
      return this._negativeSuffix = prefix;
    };

    NumberFormatter.prototype.positivePrefix = function() {
      return this._positivePrefix;
    };

    NumberFormatter.prototype.setPositivePrefix = function(prefix) {
      return this._positivePrefix = prefix;
    };

    NumberFormatter.prototype.positiveSuffix = function() {
      return this._positiveSuffix;
    };

    NumberFormatter.prototype.setPositiveSuffix = function(prefix) {
      return this._positiveSuffix = prefix;
    };

    NumberFormatter.prototype.roundingMode = function() {
      return this._roundingMode;
    };

    NumberFormatter.prototype.setRoundingMode = function(roundingMode) {
      return this._roundingMode = roundingMode;
    };

    NumberFormatter.prototype.format = function(number) {
      var extraFractionPart, fractionPart, integerPart, negative, result, string, _ref, _ref1;
      negative = number < 0;
      string = "" + (Math.abs(number));
      _ref = string.split('.'), integerPart = _ref[0], fractionPart = _ref[1];
      fractionPart || (fractionPart = '');
      while (fractionPart.length < this._minimumFractionDigits) {
        fractionPart += '0';
      }
      if (fractionPart.length > this._maximumFractionDigits) {
        extraFractionPart = fractionPart.slice(this._maximumFractionDigits);
        fractionPart = fractionPart.slice(0, this._maximumFractionDigits);
        _ref1 = this._round(negative, integerPart, fractionPart, extraFractionPart), integerPart = _ref1[0], fractionPart = _ref1[1];
      }
      if (fractionPart.length > 0 || this._alwaysShowsDecimalSeparator) {
        fractionPart = this._decimalSeparator + fractionPart;
      }
      result = integerPart + fractionPart;
      if (negative) {
        result = this._negativePrefix + result + this._negativeSuffix;
      } else {
        result = this._positivePrefix + result + this._positiveSuffix;
      }
      return result;
    };

    NumberFormatter.prototype._round = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._rounder().apply(null, args);
    };

    NumberFormatter.prototype._rounder = function() {
      switch (this._roundingMode) {
        case CEILING:
          return roundCeiling;
        case FLOOR:
          return roundFloor;
        case HALF_EVEN:
          return roundHalfEven;
      }
    };

    return NumberFormatter;

  })(Formatter);

  NumberFormatter.prototype.numberFromString = NumberFormatter.prototype.parse;

  roundCeiling = function(negative, integerPart, fractionPart, extraFractionPart) {
    if (negative) {
      return roundFloor(!negative, integerPart, fractionPart, extraFractionPart);
    }
    if (/[1-9]/.test(extraFractionPart)) {
      if (fractionPart.length === 0) {
        integerPart = "" + (Number(integerPart) + 1);
      } else {
        fractionPart = "" + fractionPart.slice(0, -1) + (Number(fractionPart.slice(-1)) + 1);
      }
    }
    return [integerPart, fractionPart];
  };

  roundFloor = function(negative, integerPart, fractionPart, extraFractionPart) {
    if (negative) {
      return roundCeiling(!negative, integerPart, fractionPart, extraFractionPart);
    }
    return [integerPart, fractionPart];
  };

  roundHalfEven = function(negative, integerPart, fractionPart, extraFractionPart) {
    var rounder;
    rounder = roundFloor;
    if (extraFractionPart[0] === '5') {
      rounder = Number(fractionPart.slice(-1)) % 2 === 0 ? roundFloor : roundCeiling;
    }
    return rounder(false, integerPart, fractionPart, extraFractionPart);
  };

  NumberFormatter.Rounding = {
    CEILING: CEILING,
    FLOOR: FLOOR,
    DOWN: DOWN,
    HALF_EVEN: HALF_EVEN,
    UP: UP,
    HALF_DOWN: HALF_DOWN,
    HALF_UP: HALF_UP
  };

  module.exports = NumberFormatter;

}).call(this);
