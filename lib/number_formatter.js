// Generated by CoffeeScript 1.4.0
(function() {
  var Formatter, NumberFormatter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Formatter = require('./formatter');

  NumberFormatter = (function(_super) {

    __extends(NumberFormatter, _super);

    function NumberFormatter() {
      return NumberFormatter.__super__.constructor.apply(this, arguments);
    }

    NumberFormatter.prototype._minimumFractionDigits = 0;

    NumberFormatter.prototype._maximumFractionDigits = 0;

    NumberFormatter.prototype._positivePrefix = '';

    NumberFormatter.prototype._positiveSuffix = '';

    NumberFormatter.prototype._negativePrefix = '-';

    NumberFormatter.prototype._negativeSuffix = '';

    NumberFormatter.prototype.positivePrefix = function() {
      return this._positivePrefix;
    };

    NumberFormatter.prototype.setPositivePrefix = function(prefix) {
      return this._positivePrefix = prefix;
    };

    NumberFormatter.prototype.positiveSuffix = function() {
      return this._positiveSuffix;
    };

    NumberFormatter.prototype.setPositiveSuffix = function(prefix) {
      return this._positiveSuffix = prefix;
    };

    NumberFormatter.prototype.negativePrefix = function() {
      return this._negativePrefix;
    };

    NumberFormatter.prototype.setNegativePrefix = function(prefix) {
      return this._negativePrefix = prefix;
    };

    NumberFormatter.prototype.negativeSuffix = function() {
      return this._negativeSuffix;
    };

    NumberFormatter.prototype.setNegativeSuffix = function(prefix) {
      return this._negativeSuffix = prefix;
    };

    NumberFormatter.prototype.minimumFractionDigits = function() {
      return this._minimumFractionDigits;
    };

    NumberFormatter.prototype.setMinimumFractionDigits = function(minimumFractionDigits) {
      this._minimumFractionDigits = minimumFractionDigits;
      return null;
    };

    NumberFormatter.prototype.maximumFractionDigits = function() {
      return this._maximumFractionDigits;
    };

    NumberFormatter.prototype.setMaximumFractionDigits = function(maximumFractionDigits) {
      this._maximumFractionDigits = maximumFractionDigits;
      return null;
    };

    NumberFormatter.prototype.format = function(number) {
      var fractionPart, integerPart, negative, result, string, _ref;
      negative = number < 0;
      string = "" + (Math.abs(number));
      _ref = string.split('.'), integerPart = _ref[0], fractionPart = _ref[1];
      result = integerPart;
      fractionPart || (fractionPart = '');
      while (fractionPart.length < this._minimumFractionDigits) {
        fractionPart += '0';
      }
      if (fractionPart.length > this._maximumFractionDigits) {
        fractionPart = fractionPart.slice(0, this._maximumFractionDigits);
      }
      if (fractionPart.length > 0) {
        result += "." + fractionPart;
      }
      if (negative) {
        result = this._negativePrefix + result + this._negativeSuffix;
      } else {
        result = this._positivePrefix + result + this._positiveSuffix;
      }
      return result;
    };

    return NumberFormatter;

  })(Formatter);

  NumberFormatter.prototype.numberFromString = NumberFormatter.prototype.parse;

  module.exports = NumberFormatter;

}).call(this);
