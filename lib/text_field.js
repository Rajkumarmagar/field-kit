// Generated by CoffeeScript 1.4.0
(function() {
  var AFFINITY, KEYS, TextField, TextFieldStateChange, UndoManager, XPATH_FOCUSABLE_FIELD, findFieldFollowing, findFieldPreceding, isWordChar, makeFirstResponder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  UndoManager = require('./undo_manager');

  KEYS = {
    A: 65,
    Y: 89,
    Z: 90,
    ZERO: 48,
    NINE: 57,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    BACKSPACE: 8,
    DELETE: 46,
    TAB: 9
  };

  KEYS.isDigit = function(keyCode) {
    return (this.ZERO <= keyCode && keyCode <= this.NINE);
  };

  KEYS.isDirectional = function(keyCode) {
    return keyCode === this.LEFT || keyCode === this.RIGHT || keyCode === this.UP || keyCode === this.DOWN;
  };

  AFFINITY = {
    UPSTREAM: 0,
    DOWNSTREAM: 1,
    NONE: null
  };

  isWordChar = function(char) {
    return char && /^\w$/.test(char);
  };

  XPATH_FOCUSABLE_FIELD = '*[name(.)="input" or name(.)="select"][not(type="hidden")][not(contains(@class, "field-kit-text-field-interceptor"))]';

  findFieldFollowing = function(element) {
    var result;
    result = document.evaluate("following::" + XPATH_FOCUSABLE_FIELD, element, null, XPathResult.ANY_TYPE, null);
    return result.iterateNext();
  };

  findFieldPreceding = function(element) {
    var result;
    result = document.evaluate("preceding::" + XPATH_FOCUSABLE_FIELD, element, null, XPathResult.ANY_TYPE, null);
    return result.iterateNext();
  };

  makeFirstResponder = function(field, event) {
    var textField;
    if (textField = $(field).data('field-kit-text-field')) {
      return textField.becomeFirstResponder(event);
    } else {
      if (typeof field.focus === "function") {
        field.focus();
      }
      return typeof field.select === "function" ? field.select() : void 0;
    }
  };

  TextField = (function() {

    TextField.prototype.selectionAffinity = AFFINITY.NONE;

    TextField.prototype._delegate = null;

    TextField.prototype.delegate = function() {
      return this._delegate;
    };

    TextField.prototype.setDelegate = function(delegate) {
      this._delegate = delegate;
      return null;
    };

    function TextField(element) {
      this.element = element;
      this._blur = __bind(this._blur, this);

      this._focus = __bind(this._focus, this);

      this.click = __bind(this.click, this);

      this.paste = __bind(this.paste, this);

      this.keyUp = __bind(this.keyUp, this);

      this.keyPress = __bind(this.keyPress, this);

      this.keyDown = __bind(this.keyDown, this);

      this.afterInterceptorKeyUp = __bind(this.afterInterceptorKeyUp, this);

      this.beforeInterceptorKeyUp = __bind(this.beforeInterceptorKeyUp, this);

      this.element.on('keydown', this.keyDown);
      this.element.on('keypress', this.keyPress);
      this.element.on('keyup', this.keyUp);
      this.element.on('click', this.click);
      this.element.on('paste', this.paste);
      this.element.on('focus', this._focus);
      this.element.on('blur', this._blur);
      this.element.data('field-kit-text-field', this);
      this.createTabInterceptors();
    }

    TextField.prototype.createTabInterceptors = function() {
      var afterInterceptor, beforeInterceptor, createInterceptor, input;
      input = this.element.get(0);
      createInterceptor = function() {
        var interceptor;
        interceptor = input.ownerDocument.createElement('input');
        interceptor.style.position = 'absolute';
        interceptor.style.top = '0';
        interceptor.style.left = '0';
        interceptor.style.opacity = 0;
        interceptor.style.zIndex = -9999;
        interceptor.style.pointerEvents = 'none';
        interceptor.className = 'field-kit-text-field-interceptor';
        return interceptor;
      };
      beforeInterceptor = createInterceptor();
      beforeInterceptor.onkeyup = this.beforeInterceptorKeyUp;
      input.parentNode.insertBefore(beforeInterceptor, input);
      afterInterceptor = createInterceptor();
      afterInterceptor.onkeyup = this.afterInterceptorKeyUp;
      if (input.nextSibling) {
        return input.parentNode.insertBefore(afterInterceptor, input.nextSibling);
      } else {
        return input.parentNode.appendChild(afterInterceptor);
      }
    };

    TextField.prototype.beforeInterceptorKeyUp = function(event) {
      var previousField;
      if (event.keyCode === KEYS.TAB && event.shiftKey) {
        if (previousField = findFieldPreceding(event.target)) {
          return makeFirstResponder(previousField);
        }
      }
    };

    TextField.prototype.afterInterceptorKeyUp = function(event) {
      var nextField;
      if (event.keyCode === KEYS.TAB && !event.shiftKey) {
        if (nextField = findFieldFollowing(event.target)) {
          return makeFirstResponder(nextField);
        }
      }
    };

    TextField.prototype.insertText = function(text) {
      var range;
      if (this.hasSelection()) {
        this.clearSelection();
      }
      this.replaceSelection(text);
      range = this.selectedRange();
      range.start += range.length;
      range.length = 0;
      return this.setSelectedRange(range);
    };

    TextField.prototype.moveUp = function(event) {
      event.preventDefault();
      return this.setSelectedRange({
        start: 0,
        length: 0
      });
    };

    TextField.prototype.moveToBeginningOfParagraph = function(event) {
      return this.moveUp(event);
    };

    TextField.prototype.moveUpAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
        case AFFINITY.NONE:
          range.length += range.start;
          range.start = 0;
          break;
        case AFFINITY.DOWNSTREAM:
          range.length = range.start;
          range.start = 0;
      }
      return this.setSelectedRangeWithAffinity(range, AFFINITY.UPSTREAM);
    };

    TextField.prototype.moveParagraphBackwardAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
        case AFFINITY.NONE:
          range.length += range.start;
          range.start = 0;
          break;
        case AFFINITY.DOWNSTREAM:
          range.length = 0;
      }
      return this.setSelectedRangeWithAffinity(range, AFFINITY.UPSTREAM);
    };

    TextField.prototype.moveToBeginningOfDocument = function(event) {
      return this.moveToBeginningOfLine(event);
    };

    TextField.prototype.moveToBeginningOfDocumentAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      range.length += range.start;
      range.start = 0;
      return this.setSelectedRangeWithAffinity(range, AFFINITY.UPSTREAM);
    };

    TextField.prototype.moveDown = function(event) {
      var range;
      event.preventDefault();
      range = {
        start: this.text().length,
        length: 0
      };
      return this.setSelectedRangeWithAffinity(range, AFFINITY.NONE);
    };

    TextField.prototype.moveToEndOfParagraph = function(event) {
      return this.moveDown(event);
    };

    TextField.prototype.moveDownAndModifySelection = function(event) {
      var end, range;
      event.preventDefault();
      range = this.selectedRange();
      end = this.text().length;
      if (this.selectionAffinity === AFFINITY.UPSTREAM) {
        range.start += range.length;
      }
      range.length = end - range.start;
      return this.setSelectedRangeWithAffinity(range, AFFINITY.DOWNSTREAM);
    };

    TextField.prototype.moveParagraphForwardAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.DOWNSTREAM:
        case AFFINITY.NONE:
          range.length = this.text().length - range.start;
          break;
        case AFFINITY.UPSTREAM:
          range.start += range.length;
          range.length = 0;
      }
      return this.setSelectedRangeWithAffinity(range, AFFINITY.DOWNSTREAM);
    };

    TextField.prototype.moveToEndOfDocument = function(event) {
      return this.moveToEndOfLine(event);
    };

    TextField.prototype.moveToEndOfDocumentAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      range.length = this.text().length - range.start;
      return this.setSelectedRangeWithAffinity(range, AFFINITY.DOWNSTREAM);
    };

    TextField.prototype.moveLeft = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      if (range.length !== 0) {
        range.length = 0;
      } else {
        range.start--;
      }
      return this.setSelectedRangeWithAffinity(range, AFFINITY.NONE);
    };

    TextField.prototype.moveLeftAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
        case AFFINITY.NONE:
          this.selectionAffinity = AFFINITY.UPSTREAM;
          range.start--;
          range.length++;
          break;
        case AFFINITY.DOWNSTREAM:
          range.length--;
      }
      return this.setSelectedRange(range);
    };

    TextField.prototype.moveWordLeft = function(event) {
      var index;
      event.preventDefault();
      index = this.lastWordBreakBeforeIndex(this.selectedRange().start - 1);
      return this.setSelectedRange({
        start: index,
        length: 0
      });
    };

    TextField.prototype.moveWordLeftAndModifySelection = function(event) {
      var end, range, start;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
        case AFFINITY.NONE:
          this.selectionAffinity = AFFINITY.UPSTREAM;
          start = this.lastWordBreakBeforeIndex(range.start - 1);
          range.length += range.start - start;
          range.start = start;
          break;
        case AFFINITY.DOWNSTREAM:
          end = this.lastWordBreakBeforeIndex(range.start + range.length);
          if (end < range.start) {
            end = range.start;
          }
          range.length -= range.start + range.length - end;
      }
      return this.setSelectedRange(range);
    };

    TextField.prototype.moveToBeginningOfLine = function(event) {
      event.preventDefault();
      return this.setSelectedRange({
        start: 0,
        length: 0
      });
    };

    TextField.prototype.moveToBeginningOfLineAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      range.length += range.start;
      range.start = 0;
      return this.setSelectedRangeWithAffinity(range, AFFINITY.UPSTREAM);
    };

    TextField.prototype.moveRight = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      if (range.length !== 0) {
        range.start += range.length;
        range.length = 0;
      } else {
        range.start++;
      }
      return this.setSelectedRangeWithAffinity(range, AFFINITY.NONE);
    };

    TextField.prototype.moveRightAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
          range.start++;
          range.length--;
          break;
        case AFFINITY.DOWNSTREAM:
        case AFFINITY.NONE:
          this.selectionAffinity = AFFINITY.DOWNSTREAM;
          range.length++;
      }
      return this.setSelectedRange(range);
    };

    TextField.prototype.moveWordRight = function(event) {
      var index, range;
      event.preventDefault();
      range = this.selectedRange();
      index = this.nextWordBreakAfterIndex(range.start + range.length);
      return this.setSelectedRange({
        start: index,
        length: 0
      });
    };

    TextField.prototype.moveWordRightAndModifySelection = function(event) {
      var end, range, start;
      event.preventDefault();
      range = this.selectedRange();
      start = range.start;
      end = range.start + range.length;
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
          start = Math.min(this.nextWordBreakAfterIndex(start), end);
          break;
        case AFFINITY.DOWNSTREAM:
        case AFFINITY.NONE:
          this.selectionAffinity = AFFINITY.DOWNSTREAM;
          end = this.nextWordBreakAfterIndex(range.start + range.length);
      }
      return this.setSelectedRange({
        start: start,
        length: end - start
      });
    };

    TextField.prototype.moveToEndOfLine = function(event) {
      event.preventDefault();
      return this.setSelectedRange({
        start: this.text().length,
        length: 0
      });
    };

    TextField.prototype.moveToEndOfLineAndModifySelection = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      range.length = this.text().length - range.start;
      return this.setSelectedRangeWithAffinity(range, AFFINITY.DOWNSTREAM);
    };

    TextField.prototype.deleteBackward = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      if (range.length === 0) {
        range.start--;
        range.length++;
        this.setSelectedRange(range);
      }
      return this.clearSelection();
    };

    TextField.prototype.deleteWordBackward = function(event) {
      var range, start;
      if (this.hasSelection()) {
        return this.deleteBackward(event);
      }
      event.preventDefault();
      range = this.selectedRange();
      start = this.lastWordBreakBeforeIndex(range.start);
      range.length += range.start - start;
      range.start = start;
      this.setSelectedRange(range);
      return this.clearSelection();
    };

    TextField.prototype.deleteBackwardByDecomposingPreviousCharacter = function(event) {
      return this.deleteBackward(event);
    };

    TextField.prototype.deleteBackwardToBeginningOfLine = function(event) {
      var range;
      if (this.hasSelection()) {
        return this.deleteBackward(event);
      }
      event.preventDefault();
      range = this.selectedRange();
      range.length = range.start;
      range.start = 0;
      this.setSelectedRange(range);
      return this.clearSelection();
    };

    TextField.prototype.deleteForward = function(event) {
      var range;
      event.preventDefault();
      range = this.selectedRange();
      if (range.length === 0) {
        range.length++;
        this.setSelectedRange(range);
      }
      return this.clearSelection();
    };

    TextField.prototype.deleteWordForward = function(event) {
      var end, range;
      if (this.hasSelection()) {
        return this.deleteForward(event);
      }
      event.preventDefault();
      range = this.selectedRange();
      end = this.nextWordBreakAfterIndex(range.start + range.length);
      this.setSelectedRange({
        start: range.start,
        length: end - range.start
      });
      return this.clearSelection();
    };

    TextField.prototype.insertTab = function(event) {};

    TextField.prototype.insertBackTab = function(event) {};

    TextField.prototype.hasSelection = function() {
      return this.selectedRange().length !== 0;
    };

    TextField.prototype.lastWordBreakBeforeIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.leftWordBreakIndexes();
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index > wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    TextField.prototype.leftWordBreakIndexes = function() {
      var i, result, text, _i, _ref;
      result = [];
      text = this.text();
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!isWordChar(text[i - 1]) && isWordChar(text[i])) {
          result.push(i);
        }
      }
      return result;
    };

    TextField.prototype.nextWordBreakAfterIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.rightWordBreakIndexes().reverse();
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index < wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    TextField.prototype.rightWordBreakIndexes = function() {
      var i, result, text, _i, _ref;
      result = [];
      text = this.text();
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (isWordChar(text[i]) && !isWordChar(text[i + 1])) {
          result.push(i + 1);
        }
      }
      return result;
    };

    TextField.prototype.clearSelection = function() {
      return this.replaceSelection('');
    };

    TextField.prototype.replaceSelection = function(replacement) {
      var end, range, text;
      range = this.selectedRange();
      end = range.start + range.length;
      text = this.text();
      text = text.substring(0, range.start) + replacement + text.substring(end);
      range.length = replacement.length;
      this.setText(text);
      return this.setSelectedRangeWithAffinity(range, AFFINITY.NONE);
    };

    TextField.prototype.selectAll = function(event) {
      event.preventDefault();
      return this.setSelectedRangeWithAffinity({
        start: 0,
        length: this.text().length
      }, AFFINITY.NONE);
    };

    TextField.prototype.readSelectionFromPasteboard = function(pasteboard) {
      var range, text;
      text = pasteboard.getData('Text');
      this.replaceSelection(text);
      range = this.selectedRange();
      range.start += range.length;
      range.length = 0;
      return this.setSelectedRange(range);
    };

    TextField.prototype.keyDown = function(event) {
      var altKey, ctrlKey, keyCode, metaKey, modifiers, shiftKey,
        _this = this;
      keyCode = event.keyCode, metaKey = event.metaKey, ctrlKey = event.ctrlKey, shiftKey = event.shiftKey, altKey = event.altKey;
      modifiers = [];
      if (altKey) {
        modifiers.push('alt');
      }
      if (ctrlKey) {
        modifiers.push('ctrl');
      }
      if (metaKey) {
        modifiers.push('meta');
      }
      if (shiftKey) {
        modifiers.push('shift');
      }
      modifiers = modifiers.join('+');
      if (keyCode === KEYS.Z && (modifiers === 'meta' || modifiers === 'ctrl')) {
        if (this.undoManager().canUndo()) {
          this.undoManager().undo();
        }
        event.preventDefault();
      } else if ((keyCode === KEYS.Z && modifiers === 'meta+shift') || (keyCode === KEYS.Y && modifiers === 'ctrl')) {
        if (this.undoManager().canRedo()) {
          this.undoManager().redo();
        }
        event.preventDefault();
      }
      return this.rollbackInvalidChanges(function() {
        if ((metaKey || ctrlKey) && keyCode === KEYS.A) {
          _this.selectAll(event);
        } else if (keyCode === KEYS.LEFT) {
          switch (modifiers) {
            case '':
              _this.moveLeft(event);
              break;
            case 'alt':
              _this.moveWordLeft(event);
              break;
            case 'shift':
              _this.moveLeftAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveWordLeftAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToBeginningOfLine(event);
              break;
            case 'meta+shift':
              _this.moveToBeginningOfLineAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled left+" + modifiers);
          }
        } else if (keyCode === KEYS.RIGHT) {
          switch (modifiers) {
            case '':
              _this.moveRight(event);
              break;
            case 'alt':
              _this.moveWordRight(event);
              break;
            case 'shift':
              _this.moveRightAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveWordRightAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToEndOfLine(event);
              break;
            case 'meta+shift':
              _this.moveToEndOfLineAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled right+" + modifiers);
          }
        } else if (keyCode === KEYS.UP) {
          switch (modifiers) {
            case '':
              _this.moveUp(event);
              break;
            case 'alt':
              _this.moveToBeginningOfParagraph(event);
              break;
            case 'shift':
              _this.moveUpAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveParagraphBackwardAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToBeginningOfDocument(event);
              break;
            case 'meta+shift':
              _this.moveToBeginningOfDocumentAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled up+" + modifiers);
          }
        } else if (keyCode === KEYS.DOWN) {
          switch (modifiers) {
            case '':
              _this.moveDown(event);
              break;
            case 'alt':
              _this.moveToEndOfParagraph(event);
              break;
            case 'shift':
              _this.moveDownAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveParagraphForwardAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToEndOfDocument(event);
              break;
            case 'meta+shift':
              _this.moveToEndOfDocumentAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled down+" + modifiers);
          }
        } else if (keyCode === KEYS.BACKSPACE) {
          switch (modifiers) {
            case '':
              _this.deleteBackward(event);
              break;
            case 'alt':
            case 'alt+shift':
              _this.deleteWordBackward(event);
              break;
            case 'ctrl':
            case 'ctrl+shift':
              _this.deleteBackwardByDecomposingPreviousCharacter(event);
              break;
            case 'meta':
            case 'meta+shift':
              _this.deleteBackwardToBeginningOfLine(event);
              break;
            default:
              throw new Error("unhandled backspace+" + modifiers);
          }
        } else if (keyCode === KEYS.DELETE) {
          if (altKey) {
            _this.deleteWordForward(event);
          } else {
            _this.deleteForward(event);
          }
        } else if (keyCode === KEYS.TAB) {
          if (shiftKey) {
            _this.insertBackTab(event);
          } else {
            _this.insertTab(event);
          }
        }
        return null;
      });
    };

    TextField.prototype.keyPress = function(event) {
      var _this = this;
      event.preventDefault();
      return this.rollbackInvalidChanges(function() {
        return _this.insertText(String.fromCharCode(event.charCode));
      });
    };

    TextField.prototype.keyUp = function(event) {
      var _this = this;
      return this.rollbackInvalidChanges(function() {
        if (event.keyCode === KEYS.TAB) {
          return _this.selectAll(event);
        }
      });
    };

    TextField.prototype.paste = function(event) {
      var _this = this;
      event.preventDefault();
      return this.rollbackInvalidChanges(function() {
        return _this.readSelectionFromPasteboard(event.originalEvent.clipboardData);
      });
    };

    TextField.prototype.rollbackInvalidChanges = function(callback) {
      var change, error, errorType, result, _ref, _ref1;
      result = null;
      errorType = null;
      change = TextFieldStateChange.build(this, function() {
        return result = callback();
      });
      error = function(type) {
        return errorType = type;
      };
      if (typeof ((_ref = this.formatter()) != null ? _ref.isChangeValid : void 0) === 'function') {
        if (this.formatter().isChangeValid(change, error)) {
          change.recomputeDiff();
          this.setText(change.proposed.text);
          this.setCaret(change.proposed.caret);
        } else {
          if ((_ref1 = this._delegate) != null) {
            if (typeof _ref1.textFieldDidFailToValidateChange === "function") {
              _ref1.textFieldDidFailToValidateChange(this, change, errorType);
            }
          }
          this.setText(change.current.text);
          this.setCaret(change.current.caret);
          return result;
        }
      }
      if (change.inserted.text.length || change.deleted.text.length) {
        this.undoManager().proxyFor(this)._applyChangeFromUndoManager(change);
      }
      return result;
    };

    TextField.prototype.click = function(event) {
      return this.selectionAffinity = AFFINITY.NONE;
    };

    TextField.prototype.on = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).on.apply(_ref, args);
    };

    TextField.prototype.off = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).off.apply(_ref, args);
    };

    TextField.prototype.text = function() {
      return this.element.val();
    };

    TextField.prototype.setText = function(text) {
      return this.element.val(text);
    };

    TextField.prototype.value = function() {
      var value,
        _this = this;
      value = this.element.val();
      if (!this._formatter) {
        return value;
      }
      return this._formatter.parse(value, function(errorType) {
        var _ref;
        return (_ref = _this._delegate) != null ? typeof _ref.textFieldDidFailToParseString === "function" ? _ref.textFieldDidFailToParseString(_this, value, errorType) : void 0 : void 0;
      });
    };

    TextField.prototype.setValue = function(value) {
      if (this._formatter) {
        value = this._formatter.format(value);
      }
      this.element.val("" + value);
      return this.element.trigger('change');
    };

    TextField.prototype.formatter = function() {
      return this._formatter;
    };

    TextField.prototype.setFormatter = function(formatter) {
      var value;
      value = this.value();
      this._formatter = formatter;
      return this.setValue(value);
    };

    TextField.prototype.caret = function() {
      var end, start, _ref;
      _ref = this.element.caret(), start = _ref.start, end = _ref.end;
      return {
        start: start,
        end: end
      };
    };

    TextField.prototype.selectedRange = function() {
      var caret;
      caret = this.caret();
      return {
        start: caret.start,
        length: caret.end - caret.start
      };
    };

    TextField.prototype.setCaret = function(caret) {
      var max, min;
      min = 0;
      max = this.text().length;
      caret = {
        start: Math.max(min, Math.min(max, caret.start)),
        end: Math.max(min, Math.min(max, caret.end))
      };
      this.element.caret(caret);
      if (caret.start === caret.end) {
        return this.selectionAffinity = AFFINITY.NONE;
      }
    };

    TextField.prototype.setSelectedRange = function(range) {
      return this.setSelectedRangeWithAffinity(range, this.selectionAffinity);
    };

    TextField.prototype.setSelectedRangeWithAffinity = function(range, affinity) {
      this.selectionAffinity = affinity;
      return this.setCaret({
        start: range.start,
        end: range.start + range.length
      });
    };

    TextField.prototype.selectionAnchor = function() {
      var range;
      range = this.selectedRange();
      switch (this.selectionAffinity) {
        case AFFINITY.UPSTREAM:
          return range.start + range.length;
        case AFFINITY.DOWNSTREAM:
          return range.start;
        default:
          return null;
      }
    };

    TextField.prototype.undoManager = function() {
      return this._undoManager || (this._undoManager = new UndoManager());
    };

    TextField.prototype.allowsUndo = function() {
      return this._allowsUndo;
    };

    TextField.prototype.setAllowsUndo = function(allowsUndo) {
      return this._allowsUndo = allowsUndo;
    };

    TextField.prototype._applyChangeFromUndoManager = function(change) {
      this.undoManager().proxyFor(this)._applyChangeFromUndoManager(change);
      if (this.undoManager().isUndoing()) {
        this.setText(change.current.text);
        return this.setCaret(change.current.caret);
      } else {
        this.setText(change.proposed.text);
        return this.setCaret(change.proposed.caret);
      }
    };

    TextField.prototype._enabled = true;

    TextField.prototype.isEnabled = function() {
      return this._enabled;
    };

    TextField.prototype.setEnabled = function(_enabled) {
      this._enabled = _enabled;
      this._syncPlaceholder();
      return null;
    };

    TextField.prototype.hasFocus = function() {
      return this.element.get(0).ownerDocument.activeElement === this.element.get(0);
    };

    TextField.prototype._focus = function(event) {
      return this._syncPlaceholder();
    };

    TextField.prototype._blur = function(event) {
      return this._syncPlaceholder();
    };

    TextField.prototype.becomeFirstResponder = function(event) {
      var _this = this;
      this.element.focus();
      return this.rollbackInvalidChanges(function() {
        _this.element.select();
        return _this._syncPlaceholder();
      });
    };

    TextField.prototype.resignFirstResponder = function(event) {
      event.preventDefault();
      this.element.blur();
      return this._syncPlaceholder();
    };

    TextField.prototype._placeholder = null;

    TextField.prototype._disabledPlaceholder = null;

    TextField.prototype._focusedPlaceholder = null;

    TextField.prototype._unfocusedPlaceholder = null;

    TextField.prototype.disabledPlaceholder = function() {
      return this._disabledPlaceholder;
    };

    TextField.prototype.setDisabledPlaceholder = function(_disabledPlaceholder) {
      this._disabledPlaceholder = _disabledPlaceholder;
      this._syncPlaceholder();
      return null;
    };

    TextField.prototype.focusedPlaceholder = function() {
      return this._focusedPlaceholder;
    };

    TextField.prototype.setFocusedPlaceholder = function(_focusedPlaceholder) {
      this._focusedPlaceholder = _focusedPlaceholder;
      this._syncPlaceholder();
      return null;
    };

    TextField.prototype.unfocusedPlaceholder = function() {
      return this._unfocusedPlaceholder;
    };

    TextField.prototype.setUnfocusedPlaceholder = function(_unfocusedPlaceholder) {
      this._unfocusedPlaceholder = _unfocusedPlaceholder;
      this._syncPlaceholder();
      return null;
    };

    TextField.prototype.placeholder = function() {
      return this._placeholder;
    };

    TextField.prototype.setPlaceholder = function(_placeholder) {
      this._placeholder = _placeholder;
      return this.element.attr('placeholder', this._placeholder);
    };

    TextField.prototype._syncPlaceholder = function() {
      if (!this._enabled) {
        if (this._disabledPlaceholder != null) {
          return this.setPlaceholder(this._disabledPlaceholder);
        }
      } else if (this.hasFocus()) {
        if (this._focusedPlaceholder != null) {
          return this.setPlaceholder(this._focusedPlaceholder);
        }
      } else {
        if (this._unfocusedPlaceholder != null) {
          return this.setPlaceholder(this._unfocusedPlaceholder);
        }
      }
    };

    TextField.prototype.inspect = function() {
      return "#<TextField text=" + (this.text()) + ">";
    };

    return TextField;

  })();

  TextFieldStateChange = (function() {

    TextFieldStateChange.prototype.field = null;

    TextFieldStateChange.prototype.current = null;

    TextFieldStateChange.prototype.proposed = null;

    function TextFieldStateChange(field) {
      this.field = field;
    }

    TextFieldStateChange.build = function(field, callback) {
      var change;
      change = new this(field);
      change.current = {
        text: field.text(),
        caret: field.caret()
      };
      callback();
      change.proposed = {
        text: field.text(),
        caret: field.caret()
      };
      change.recomputeDiff();
      return change;
    };

    TextFieldStateChange.prototype.recomputeDiff = function() {
      var ctext, deleted, i, inserted, minTextLength, ptext, sharedPrefixLength, sharedSuffixLength, _i, _j, _ref;
      if (this.proposed.text !== this.current.text) {
        ctext = this.current.text;
        ptext = this.proposed.text;
        sharedPrefixLength = 0;
        sharedSuffixLength = 0;
        minTextLength = Math.min(ctext.length, ptext.length);
        for (i = _i = 0; 0 <= minTextLength ? _i < minTextLength : _i > minTextLength; i = 0 <= minTextLength ? ++_i : --_i) {
          if (ptext[i] === ctext[i]) {
            sharedPrefixLength = i + 1;
          } else {
            break;
          }
        }
        for (i = _j = 0, _ref = minTextLength - sharedPrefixLength; 0 <= _ref ? _j < _ref : _j > _ref; i = 0 <= _ref ? ++_j : --_j) {
          if (ptext[ptext.length - 1 - i] === ctext[ctext.length - 1 - i]) {
            sharedSuffixLength = i + 1;
          } else {
            break;
          }
        }
        inserted = {
          start: sharedPrefixLength,
          end: ptext.length - sharedSuffixLength
        };
        deleted = {
          start: sharedPrefixLength,
          end: ctext.length - sharedSuffixLength
        };
        inserted.text = ptext.substring(inserted.start, inserted.end);
        deleted.text = ctext.substring(deleted.start, deleted.end);
        this.inserted = inserted;
        this.deleted = deleted;
      } else {
        this.inserted = {
          start: this.proposed.caret.start,
          end: this.proposed.caret.end,
          text: ''
        };
        this.deleted = {
          start: this.current.caret.start,
          end: this.current.caret.end,
          text: ''
        };
      }
      return null;
    };

    return TextFieldStateChange;

  })();

  module.exports = TextField;

}).call(this);
