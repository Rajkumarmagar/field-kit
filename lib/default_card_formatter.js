// Generated by CoffeeScript 1.4.0
(function() {
  var DEFAULT_SPACE_INDEXES, DefaultCardFormatter,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DEFAULT_SPACE_INDEXES = [4, 8, 12];

  if (typeof Object.freeze === "function") {
    Object.freeze(DEFAULT_SPACE_INDEXES);
  }

  DefaultCardFormatter = (function() {

    DefaultCardFormatter.prototype.spaceIndexes = null;

    DefaultCardFormatter.prototype.cardLength = 16;

    function DefaultCardFormatter() {
      this.spaceIndexes = DEFAULT_SPACE_INDEXES;
    }

    DefaultCardFormatter.prototype.format = function(pan) {
      var char, i, result, _i, _len, _ref, _ref1;
      if (!pan) {
        return '';
      }
      result = '';
      _ref = pan.slice(0, this.cardLength);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        char = _ref[i];
        result += char;
        if (_ref1 = i + 1, __indexOf.call(this.spaceIndexes, _ref1) >= 0) {
          result += ' ';
        }
      }
      return result;
    };

    DefaultCardFormatter.prototype.parse = function(text) {
      if (!text) {
        return null;
      }
      return text.replace(/[^\d]/g, '');
    };

    DefaultCardFormatter.prototype.isChangeValid = function(change) {
      var caret, endMovedLeft, hasSelection, i, newText, spaceIndex, startMovedLeft, _i, _j, _len, _len1, _ref, _ref1;
      newText = change.proposed.text;
      if (change.deleted.text === ' ') {
        newText = newText.substring(0, newText.length - 1);
      }
      caret = change.proposed.caret;
      hasSelection = caret.start !== caret.end;
      startMovedLeft = caret.start < change.current.caret.start;
      endMovedLeft = caret.end < change.current.caret.end;
      _ref = this.spaceIndexes;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        spaceIndex = _ref[i];
        if (caret.start === spaceIndex + i) {
          if (startMovedLeft) {
            caret.start--;
          } else {
            caret.start++;
          }
        }
      }
      if (hasSelection) {
        _ref1 = this.spaceIndexes;
        for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
          spaceIndex = _ref1[i];
          if (caret.end === spaceIndex + i + 1) {
            if (startMovedLeft || endMovedLeft) {
              caret.end--;
            } else {
              caret.end++;
            }
          }
        }
      } else {
        caret.end = caret.start;
      }
      newText = this.format(this.parse(newText));
      change.proposed.text = newText;
      return true;
    };

    return DefaultCardFormatter;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = DefaultCardFormatter;
  } else {
    this.DefaultCardFormatter = DefaultCardFormatter;
  }

}).call(this);
