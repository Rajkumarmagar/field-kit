// Generated by CoffeeScript 1.4.0
(function() {
  var DEFAULT_SPACE_INDEXES, DefaultCardFormatter,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DEFAULT_SPACE_INDEXES = [3, 7, 11];

  if (typeof Object.freeze === "function") {
    Object.freeze(DEFAULT_SPACE_INDEXES);
  }

  DefaultCardFormatter = (function() {

    DefaultCardFormatter.prototype.spaceIndexes = null;

    function DefaultCardFormatter() {
      this.spaceIndexes = DEFAULT_SPACE_INDEXES;
    }

    DefaultCardFormatter.prototype.format = function(pan) {
      var char, i, result, _i, _len, _ref;
      if (!pan) {
        return '';
      }
      result = '';
      _ref = pan.slice(0, 16);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        char = _ref[i];
        result += char;
        if (__indexOf.call(this.spaceIndexes, i) >= 0) {
          result += ' ';
        }
      }
      return result;
    };

    DefaultCardFormatter.prototype.parse = function(text) {
      if (!text) {
        return null;
      }
      return text.replace(/[^\d]/g, '');
    };

    DefaultCardFormatter.prototype.isChangeValid = function(change) {
      var newText;
      newText = change.proposed.text;
      if (change.deleted.text === ' ') {
        newText = newText.substring(0, newText.length - 1);
      }
      newText = this.format(this.parse(newText));
      change.proposed.text = newText;
      change.proposed.caret = {
        start: newText.length,
        end: newText.length
      };
      return true;
    };

    return DefaultCardFormatter;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = DefaultCardFormatter;
  } else {
    this.DefaultCardFormatter = DefaultCardFormatter;
  }

}).call(this);
