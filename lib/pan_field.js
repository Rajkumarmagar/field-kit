// Generated by CoffeeScript 1.3.3
(function() {
  var KEYS, PanField, isWordChar,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  KEYS = {
    A: 65,
    ZERO: 48,
    NINE: 57,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    BACKSPACE: 8,
    DELETE: 46
  };

  KEYS.isDigit = function(keyCode) {
    return (this.ZERO <= keyCode && keyCode <= this.NINE);
  };

  KEYS.isDirectional = function(keyCode) {
    return keyCode === this.LEFT || keyCode === this.RIGHT || keyCode === this.UP || keyCode === this.DOWN;
  };

  isWordChar = function(char) {
    return char && /^\w$/.test(char);
  };

  PanField = (function() {

    function PanField(element) {
      this.element = element;
      this.click = __bind(this.click, this);

      this.keyUp = __bind(this.keyUp, this);

      this.keyPress = __bind(this.keyPress, this);

      this.keyDown = __bind(this.keyDown, this);

      this.element.on('keydown', this.keyDown);
      this.element.on('keyup', this.keyUp);
      this.element.on('click', this.click);
    }

    PanField.prototype.keyDown = function(event) {
      var altKey, ctrlKey, keyCode, metaKey, shiftKey;
      keyCode = event.keyCode, metaKey = event.metaKey, ctrlKey = event.ctrlKey, shiftKey = event.shiftKey, altKey = event.altKey;
      if ((metaKey || ctrlKey) && keyCode === KEYS.A) {
        this.selectAll(event);
      } else if (metaKey || ctrlKey) {
        (function() {});
      } else if (KEYS.isDirectional(keyCode)) {
        switch (keyCode) {
          case KEYS.LEFT:
            if (shiftKey && altKey) {
              this.moveWordLeftAndModifySelection(event);
            } else if (shiftKey) {
              this.moveLeftAndModifySelection(event);
            } else if (altKey) {
              this.moveWordLeft(event);
            } else {
              this.moveLeft(event);
            }
            break;
          case KEYS.RIGHT:
            if (shiftKey && altKey) {
              this.moveWordRightAndModifySelection(event);
            } else if (shiftKey) {
              this.moveRightAndModifySelection(event);
            } else if (altKey) {
              this.moveWordRight(event);
            } else {
              this.moveRight(event);
            }
            break;
          case KEYS.UP:
            if (shiftKey) {
              this.moveUpAndModifySelection(event);
            } else {
              this.moveUp(event);
            }
            break;
          case KEYS.DOWN:
            if (shiftKey) {
              this.moveDownAndModifySelection(event);
            } else {
              this.moveDown(event);
            }
        }
      } else if (keyCode === KEYS.BACKSPACE) {
        if (altKey) {
          this.deleteWordBackward(event);
        } else if (ctrlKey) {
          this.deleteBackwardByDecomposingPreviousCharacter(event);
        } else {
          this.deleteBackward(event);
        }
      } else if (keyCode === KEYS.DELETE) {
        if (altKey) {
          this.deleteWordForward(event);
        } else {
          this.deleteForward(event);
        }
      } else if (shiftKey || altKey) {
        event.preventDefault();
      } else {
        this.insertCharacter(event);
      }
      return null;
    };

    PanField.prototype.moveUp = function(event) {
      event.preventDefault();
      this.caret = {
        start: 0,
        end: 0
      };
      return this.selectionDirection = null;
    };

    PanField.prototype.moveUpAndModifySelection = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
        case null:
          caret.start = 0;
          break;
        case 'right':
          caret.end = caret.start;
          caret.start = 0;
      }
      this.caret = caret;
      return this.selectionDirection = 'left';
    };

    PanField.prototype.moveDown = function() {
      var end;
      end = this.value.length;
      event.preventDefault();
      this.caret = {
        start: end,
        end: end
      };
      return this.selectionDirection = null;
    };

    PanField.prototype.moveDownAndModifySelection = function() {
      var caret, end;
      caret = this.caret;
      end = this.value.length;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
          caret.start = caret.end;
          caret.end = end;
          break;
        case 'right':
        case null:
          caret.end = end;
      }
      this.caret = caret;
      return this.selectionDirection = 'right';
    };

    PanField.prototype.moveLeft = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      if (this.hasSelection) {
        caret.end = caret.start;
      } else {
        caret.start--;
        caret.end--;
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.moveWordLeft = function(event) {
      var index;
      event.preventDefault();
      index = this.lastWordBreakBeforeIndex(this.caret.start - 1);
      this.caret = {
        start: index,
        end: index
      };
      return this.selectionDirection = null;
    };

    PanField.prototype.moveWordLeftAndModifySelection = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
        case null:
          this.selectionDirection = 'left';
          caret.start = this.lastWordBreakBeforeIndex(caret.start - 1);
          break;
        case 'right':
          caret.end = this.lastWordBreakBeforeIndex(caret.end);
          if (caret.end < caret.start) {
            caret.end = caret.start;
          }
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.moveLeftAndModifySelection = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
        case null:
          this.selectionDirection = 'left';
          caret.start--;
          break;
        case 'right':
          caret.end--;
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.moveRight = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      if (this.hasSelection) {
        caret.start = caret.end;
      } else {
        caret.start++;
        caret.end++;
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.moveWordRight = function(event) {
      var index;
      event.preventDefault();
      index = this.nextWordBreakAfterIndex(this.caret.end);
      this.caret = {
        start: index,
        end: index
      };
      return this.selectionDirection = null;
    };

    PanField.prototype.moveWordRightAndModifySelection = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
          caret.start = this.nextWordBreakAfterIndex(caret.start);
          if (caret.start > caret.end) {
            caret.start = caret.end;
          }
          break;
        case 'right':
        case null:
          this.selectionDirection = 'right';
          caret.end = this.nextWordBreakAfterIndex(caret.end);
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.moveRightAndModifySelection = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      switch (this.selectionDirection) {
        case 'left':
          caret.start++;
          break;
        case 'right':
        case null:
          this.selectionDirection = 'right';
          caret.end++;
      }
      this.caret = caret;
      if (caret.start === caret.end) {
        return this.selectionDirection = null;
      }
    };

    PanField.prototype.deleteBackward = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      caret.start--;
      this.caret = caret;
      return this.clearSelection();
    };

    PanField.prototype.deleteWordBackward = function(event) {
      var caret;
      if (this.hasSelection) {
        return this.deleteBackward(event);
      }
      event.preventDefault();
      caret = this.caret;
      caret.start = this.lastWordBreakBeforeIndex(caret.start - 1);
      this.caret = caret;
      return this.clearSelection();
    };

    PanField.prototype.deleteBackwardByDecomposingPreviousCharacter = function(event) {
      return this.deleteBackward(event);
    };

    PanField.prototype.deleteForward = function(event) {
      var caret;
      caret = this.caret;
      event.preventDefault();
      caret.end++;
      this.caret = caret;
      return this.clearSelection();
    };

    PanField.prototype.deleteWordForward = function(event) {
      var caret;
      if (this.hasSelection) {
        return this.deleteForward(event);
      }
      caret = this.caret;
      event.preventDefault();
      caret.end = this.nextWordBreakAfterIndex(caret.end);
      this.caret = caret;
      return this.clearSelection();
    };

    PanField.prototype.__defineGetter__('hasSelection', function() {
      var caret;
      caret = this.caret;
      return caret.start !== caret.end;
    });

    PanField.prototype.__defineGetter__('leftWordBreakIndexes', function() {
      var i, mapping, result, text, _i, _ref;
      result = [];
      text = this.text;
      mapping = this.textToValueMapping;
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!isWordChar(text[i - 1]) && isWordChar(text[i])) {
          result.push(mapping[i]);
        }
      }
      return result;
    });

    PanField.prototype.__defineGetter__('rightWordBreakIndexes', function() {
      var i, mapping, result, text, _i, _ref;
      result = [];
      text = this.text;
      mapping = this.textToValueMapping;
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (isWordChar(text[i]) && !isWordChar(text[i + 1])) {
          result.push(mapping[i + 1]);
        }
      }
      return result;
    });

    PanField.prototype.lastWordBreakBeforeIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.leftWordBreakIndexes;
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index > wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    PanField.prototype.nextWordBreakAfterIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.rightWordBreakIndexes.reverse();
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index < wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    PanField.prototype.clearSelection = function() {
      return this.replaceSelection('');
    };

    PanField.prototype.replaceSelection = function(text) {
      var caret, value;
      caret = this.caret;
      value = this.value;
      value = value.substring(0, caret.start) + text + value.substring(caret.end);
      caret.end = caret.start + text.length;
      this.value = value;
      this.caret = caret;
      return this.selectionDirection = null;
    };

    PanField.prototype.selectAll = function(event) {
      return this.selectionDirection = null;
    };

    PanField.prototype.keyPress = function(event) {};

    PanField.prototype.keyUp = function(event) {
      var caret, value;
      caret = this.caret;
      value = this.value;
      this.value = value;
      return this.caret = caret;
    };

    PanField.prototype.click = function() {
      return this.selectionDirection = null;
    };

    PanField.prototype.insertCharacter = function(event) {
      var caret;
      event.preventDefault();
      if (!KEYS.isDigit(event.charCode)) {
        return;
      }
      if (this.hasSelection) {
        this.clearSelection();
      }
      if (this.value.length >= this.formatter.length) {
        return;
      }
      this.replaceSelection(String.fromCharCode(event.charCode));
      caret = this.caret;
      caret.start = caret.end;
      return this.caret = caret;
    };

    PanField.prototype.selectionDirection = null;

    PanField.prototype.on = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).on.apply(_ref, args);
    };

    PanField.prototype.off = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).off.apply(_ref, args);
    };

    PanField.prototype.__defineGetter__('text', function() {
      return this.element.val();
    });

    PanField.prototype.__defineSetter__('text', function(text) {
      return this.element.val(text);
    });

    PanField.prototype.__defineGetter__('value', function() {
      var value;
      value = this.element.val();
      if (!this._formatter) {
        return value;
      }
      return this._formatter.parse(value);
    });

    PanField.prototype.__defineSetter__('value', function(value) {
      if (this._formatter) {
        value = this._formatter.format(value);
      }
      this.element.val(value);
      return this.element.trigger('change');
    });

    PanField.prototype.__defineGetter__('formatter', function() {
      return this._formatter;
    });

    PanField.prototype.__defineSetter__('formatter', function(formatter) {
      var value;
      value = this.value;
      this._formatter = formatter;
      return this.value = value;
    });

    PanField.prototype.__defineGetter__('textToValueMapping', function() {
      var mapping, text, textIndex, value, valueIndex;
      value = this.value;
      text = this.text;
      mapping = {};
      valueIndex = 0;
      textIndex = 0;
      while (textIndex <= text.length) {
        mapping[textIndex] = valueIndex;
        if (text[textIndex] === value[valueIndex]) {
          textIndex++;
          valueIndex++;
        } else {
          textIndex++;
        }
      }
      return mapping;
    });

    PanField.prototype.__defineGetter__('caret', function() {
      var mapping, textCaret;
      mapping = this.textToValueMapping;
      textCaret = this.element.caret();
      return {
        start: mapping[textCaret.start],
        end: mapping[textCaret.end]
      };
    });

    PanField.prototype.__defineSetter__('caret', function(valueCaret) {
      var max, min, textCaret, textIndex, valueIndex, _ref;
      min = 0;
      max = this.value.length;
      valueCaret = {
        start: Math.max(min, Math.min(max, valueCaret.start)),
        end: Math.max(min, Math.min(max, valueCaret.end))
      };
      textCaret = {};
      _ref = this.textToValueMapping;
      for (textIndex in _ref) {
        if (!__hasProp.call(_ref, textIndex)) continue;
        valueIndex = _ref[textIndex];
        if (valueCaret.start === valueIndex) {
          textCaret.start = textIndex;
        }
        if (valueCaret.end === valueIndex) {
          textCaret.end = textIndex;
        }
      }
      if (!(textCaret.start != null) || !(textCaret.end != null)) {
        throw new Error("unable to map value caret " + (JSON.stringify(valueCaret)) + " to text caret, so far got: " + (JSON.stringify(textCaret)) + ", mapping=" + (JSON.stringify(this.textToValueMapping)));
      }
      return this.element.caret(textCaret);
    });

    return PanField;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = PanField;
  } else if (typeof window !== "undefined" && window !== null) {
    window.PanField = PanField;
  }

}).call(this);
