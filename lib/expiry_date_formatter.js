// Generated by CoffeeScript 1.4.0
(function() {
  var ExpiryDateFormatter, zpad2;

  zpad2 = function(n) {
    var result;
    result = "" + n;
    while (result.length < 2) {
      result = "0" + result;
    }
    return result;
  };

  ExpiryDateFormatter = (function() {

    function ExpiryDateFormatter() {}

    ExpiryDateFormatter.prototype.format = function(value) {
      var month, year;
      if (!value) {
        return '';
      }
      month = value.month, year = value.year;
      year = year % 10;
      return "" + (zpad2(month)) + "/" + (zpad2(year));
    };

    ExpiryDateFormatter.prototype.parse = function(text) {
      var match;
      if (match = text.match(/^(0?[1-9]|1\d)\/(\d\d)$/)) {
        return {
          month: Number(match[1]),
          year: Number(match[2])
        };
      }
    };

    ExpiryDateFormatter.prototype.isChangeValid = function(change) {
      var isBackspace, match, newText;
      isBackspace = change.proposed.text.length < change.current.text.length;
      newText = change.proposed.text;
      if (isBackspace) {
        if (change.deleted.text === '/') {
          newText = newText[0];
        }
        if (newText === '0') {
          newText = '';
        }
      } else if (change.inserted.text === '/' && change.current.text === '1') {
        newText = '01/';
      } else if (!/^\d$/.test(change.inserted.text)) {
        return false;
      } else {
        if (/^[2-9]$/.test(newText)) {
          newText = '0' + newText;
        }
        if (/^1[3-9]$/.test(newText)) {
          return false;
        }
        if (/^(0\d|1[0-2])$/.test(newText)) {
          newText += '/';
        }
        if (match = newText.match(/^(\d\d)\/(\d\d?).*$/)) {
          newText = match[1] + '/' + match[2];
        }
      }
      change.proposed.text = newText;
      change.proposed.caret = {
        start: newText.length,
        end: newText.length
      };
      return true;
    };

    return ExpiryDateFormatter;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = ExpiryDateFormatter;
  } else {
    this.ExpiryDateFormatter = ExpiryDateFormatter;
  }

}).call(this);
