// Generated by CoffeeScript 1.6.2
(function() {
  var DelimitedTextFormatter, US_PHONE_DELIMITERS, US_PHONE_DELIMITERS_WITH_1, US_PHONE_DELIMITERS_WITH_PLUS, UsPhoneFormatter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DelimitedTextFormatter = require('./delimited_text_formatter');

  US_PHONE_DELIMITERS = {
    0: '(',
    4: ')',
    5: ' ',
    9: '-'
  };

  US_PHONE_DELIMITERS_WITH_1 = {
    1: ' ',
    2: '(',
    6: ')',
    7: ' ',
    11: '-'
  };

  US_PHONE_DELIMITERS_WITH_PLUS = {
    2: ' ',
    3: '(',
    7: ')',
    8: ' ',
    12: '-'
  };

  UsPhoneFormatter = (function(_super) {
    __extends(UsPhoneFormatter, _super);

    UsPhoneFormatter.prototype.maximumLength = null;

    UsPhoneFormatter.prototype.delimiterMap = null;

    function UsPhoneFormatter() {
      if (arguments.length !== 0) {
        throw new Error("were you trying to set a delimiter (" + arguments[0] + ")?");
      }
    }

    UsPhoneFormatter.prototype.isDelimiter = function(chr) {
      var delimiter, index;

      return __indexOf.call((function() {
        var _ref, _results;

        _ref = this.delimiterMap;
        _results = [];
        for (index in _ref) {
          delimiter = _ref[index];
          _results.push(delimiter);
        }
        return _results;
      }).call(this), chr) >= 0;
    };

    UsPhoneFormatter.prototype.delimiterAt = function(index) {
      return this.delimiterMap[index];
    };

    UsPhoneFormatter.prototype.hasDelimiterAtIndex = function(index) {
      return this.delimiterAt(index) != null;
    };

    UsPhoneFormatter.prototype.isChangeValid = function(change, error) {
      if (change.proposed.text[0] === '+') {
        this.delimiterMap = US_PHONE_DELIMITERS_WITH_PLUS;
        this.maximumLength = 1 + 1 + 10 + 5;
      } else if (change.proposed.text[0] === '1') {
        this.delimiterMap = US_PHONE_DELIMITERS_WITH_1;
        this.maximumLength = 1 + 10 + 5;
      } else {
        this.delimiterMap = US_PHONE_DELIMITERS;
        this.maximumLength = 10 + 4;
      }
      if (/^\d*$/.test(change.inserted.text) || change.proposed.text.indexOf('+') === 0) {
        return UsPhoneFormatter.__super__.isChangeValid.call(this, change, error);
      } else {
        return false;
      }
    };

    return UsPhoneFormatter;

  })(DelimitedTextFormatter);

  module.exports = UsPhoneFormatter;

}).call(this);
