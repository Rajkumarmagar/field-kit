// Generated by CoffeeScript 1.6.1
(function() {
  var DelimitedTextFormatter, UsPhoneDelimiter, UsPhoneFormatter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  DelimitedTextFormatter = require('./delimited_text_formatter');

  UsPhoneDelimiter = {
    0: '(',
    4: ')',
    5: ' ',
    9: '-'
  };

  UsPhoneFormatter = (function(_super) {

    __extends(UsPhoneFormatter, _super);

    UsPhoneFormatter.prototype.maximumLength = 10 + 4;

    function UsPhoneFormatter() {
      if (arguments.length !== 0) {
        throw new Error("were you trying to set a delimiter (" + arguments[0] + ")?");
      }
    }

    UsPhoneFormatter.prototype.isDelimiter = function(char) {
      var delimiter, index;
      return __indexOf.call((function() {
        var _results;
        _results = [];
        for (index in UsPhoneDelimiter) {
          delimiter = UsPhoneDelimiter[index];
          _results.push(delimiter);
        }
        return _results;
      })(), char) >= 0;
    };

    UsPhoneFormatter.prototype.delimiterAt = function(index) {
      return UsPhoneDelimiter[index];
    };

    UsPhoneFormatter.prototype.hasDelimiterAtIndex = function(index) {
      return this.delimiterAt(index) != null;
    };

    UsPhoneFormatter.prototype.isChangeValid = function(change, error) {
      if (/^\d*$/.test(change.inserted.text)) {
        return UsPhoneFormatter.__super__.isChangeValid.call(this, change, error);
      } else {
        return false;
      }
    };

    return UsPhoneFormatter;

  })(DelimitedTextFormatter);

  module.exports = UsPhoneFormatter;

}).call(this);
