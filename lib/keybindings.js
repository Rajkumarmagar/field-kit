// Generated by CoffeeScript 1.4.0
(function() {
  var A, ALT, BACKSPACE, BindingSet, CTRL, DELETE, DOWN, ENTER, KEYS, LEFT, META, NINE, RIGHT, SHIFT, TAB, UP, Y, Z, ZERO, build, cache, keyBindingsForPlatform,
    __slice = [].slice;

  A = 65;

  Y = 89;

  Z = 90;

  ZERO = 48;

  NINE = 57;

  LEFT = 37;

  RIGHT = 39;

  UP = 38;

  DOWN = 40;

  BACKSPACE = 8;

  DELETE = 46;

  TAB = 9;

  ENTER = 13;

  KEYS = {
    A: A,
    Y: Y,
    Z: Z,
    ZERO: ZERO,
    NINE: NINE,
    LEFT: LEFT,
    RIGHT: RIGHT,
    UP: UP,
    DOWN: DOWN,
    BACKSPACE: BACKSPACE,
    DELETE: DELETE,
    TAB: TAB,
    ENTER: ENTER,
    isDigit: function(keyCode) {
      return (this.ZERO <= keyCode && keyCode <= this.NINE);
    },
    isDirectional: function(keyCode) {
      return keyCode === this.LEFT || keyCode === this.RIGHT || keyCode === this.UP || keyCode === this.DOWN;
    }
  };

  CTRL = 1 << 0;

  META = 1 << 1;

  ALT = 1 << 2;

  SHIFT = 1 << 3;

  cache = {};

  keyBindingsForPlatform = function(platform) {
    var ctrl, osx;
    osx = platform === 'OSX';
    ctrl = osx ? META : CTRL;
    return cache[platform] || (cache[platform] = build(platform, function(bind) {
      bind(A, ctrl, 'selectAll');
      bind(LEFT, null, 'moveLeft');
      bind(LEFT, ALT, 'moveWordLeft');
      bind(LEFT, SHIFT, 'moveLeftAndModifySelection');
      bind(LEFT, ALT | SHIFT, 'moveWordLeftAndModifySelection');
      if (osx) {
        bind(LEFT, META, 'moveToBeginningOfLine');
      }
      if (osx) {
        bind(LEFT, META | SHIFT, 'moveToBeginningOfLineAndModifySelection');
      }
      bind(RIGHT, null, 'moveRight');
      bind(RIGHT, ALT, 'moveWordRight');
      bind(RIGHT, SHIFT, 'moveRightAndModifySelection');
      bind(RIGHT, ALT | SHIFT, 'moveWordRightAndModifySelection');
      if (osx) {
        bind(RIGHT, META, 'moveToEndOfLine');
      }
      if (osx) {
        bind(RIGHT, META | SHIFT, 'moveToEndOfLineAndModifySelection');
      }
      bind(UP, null, 'moveUp');
      bind(UP, ALT, 'moveToBeginningOfParagraph');
      bind(UP, SHIFT, 'moveUpAndModifySelection');
      bind(UP, ALT | SHIFT, 'moveParagraphBackwardAndModifySelection');
      if (osx) {
        bind(UP, META, 'moveToBeginningOfDocument');
      }
      if (osx) {
        bind(UP, META | SHIFT, 'moveToBeginningOfDocumentAndModifySelection');
      }
      bind(DOWN, null, 'moveDown');
      bind(DOWN, ALT, 'moveToEndOfParagraph');
      bind(DOWN, SHIFT, 'moveDownAndModifySelection');
      bind(DOWN, ALT | SHIFT, 'moveParagraphForwardAndModifySelection');
      if (osx) {
        bind(DOWN, META, 'moveToEndOfDocument');
      }
      if (osx) {
        bind(DOWN, META | SHIFT, 'moveToEndOfDocumentAndModifySelection');
      }
      bind(BACKSPACE, null, 'deleteBackward');
      bind(BACKSPACE, SHIFT, 'deleteBackward');
      bind(BACKSPACE, ALT, 'deleteWordBackward');
      bind(BACKSPACE, ALT | SHIFT, 'deleteWordBackward');
      if (osx) {
        bind(BACKSPACE, CTRL, 'deleteBackwardByDecomposingPreviousCharacter');
      }
      if (osx) {
        bind(BACKSPACE, CTRL | SHIFT, 'deleteBackwardByDecomposingPreviousCharacter');
      }
      bind(BACKSPACE, ctrl, 'deleteBackwardToBeginningOfLine');
      bind(BACKSPACE, ctrl | SHIFT, 'deleteBackwardToBeginningOfLine');
      bind(DELETE, null, 'deleteForward');
      bind(DELETE, ALT, 'deleteWordForward');
      bind(TAB, null, 'insertTab');
      bind(TAB, SHIFT, 'insertBackTab');
      bind(ENTER, null, 'insertNewline');
      bind(Z, ctrl, 'undo');
      if (osx) {
        bind(Z, META | SHIFT, 'redo');
      }
      if (!osx) {
        return bind(Y, CTRL, 'redo');
      }
    }));
  };

  build = function(platform, callback) {
    var result;
    result = new BindingSet(platform);
    callback(function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return result.bind.apply(result, args);
    });
    return result;
  };

  BindingSet = (function() {

    BindingSet.prototype.platform = null;

    BindingSet.prototype.bindings = null;

    function BindingSet(platform) {
      this.platform = platform;
      this.bindings = {};
    }

    BindingSet.prototype.bind = function(keyCode, modifiers, action) {
      var _base;
      return ((_base = this.bindings)[keyCode] || (_base[keyCode] = {}))[modifiers || 0] = action;
    };

    BindingSet.prototype.actionForEvent = function(event) {
      var bindingsForKeyCode, modifiers;
      if (bindingsForKeyCode = this.bindings[event.keyCode]) {
        modifiers = 0;
        if (event.altKey) {
          modifiers |= ALT;
        }
        if (event.ctrlKey) {
          modifiers |= CTRL;
        }
        if (event.metaKey) {
          modifiers |= META;
        }
        if (event.shiftKey) {
          modifiers |= SHIFT;
        }
        return bindingsForKeyCode[modifiers];
      }
    };

    return BindingSet;

  })();

  module.exports = {
    KEYS: KEYS,
    keyBindingsForPlatform: keyBindingsForPlatform
  };

}).call(this);
