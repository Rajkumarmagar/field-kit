// Generated by CoffeeScript 1.4.0
(function() {
  var DIRECTION, FormattedTextField, KEYS, XPATH_FOCUSABLE_FIELD, findFieldFollowing, findFieldPreceding, isWordChar, makeFirstResponder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  KEYS = {
    A: 65,
    ZERO: 48,
    NINE: 57,
    LEFT: 37,
    RIGHT: 39,
    UP: 38,
    DOWN: 40,
    BACKSPACE: 8,
    DELETE: 46,
    TAB: 9
  };

  KEYS.isDigit = function(keyCode) {
    return (this.ZERO <= keyCode && keyCode <= this.NINE);
  };

  KEYS.isDirectional = function(keyCode) {
    return keyCode === this.LEFT || keyCode === this.RIGHT || keyCode === this.UP || keyCode === this.DOWN;
  };

  DIRECTION = {
    LEFT: 'left',
    RIGHT: 'right',
    NONE: null
  };

  isWordChar = function(char) {
    return char && /^\w$/.test(char);
  };

  XPATH_FOCUSABLE_FIELD = '*[name(.)="input" or name(.)="select"][not(type="hidden")][not(contains(@class, "formatted-text-field-interceptor"))]';

  findFieldFollowing = function(element) {
    var result;
    result = document.evaluate("following::" + XPATH_FOCUSABLE_FIELD, element, null, XPathResult.ANY_TYPE, null);
    return result.iterateNext();
  };

  findFieldPreceding = function(element) {
    var result;
    result = document.evaluate("preceding::" + XPATH_FOCUSABLE_FIELD, element, null, XPathResult.ANY_TYPE, null);
    return result.iterateNext();
  };

  makeFirstResponder = function(field, event) {
    var formattedTextField;
    if (formattedTextField = $(field).data('formatted-text-field')) {
      return formattedTextField.becomeFirstResponder(event);
    } else {
      if (typeof field.focus === "function") {
        field.focus();
      }
      return typeof field.select === "function" ? field.select() : void 0;
    }
  };

  FormattedTextField = (function() {

    FormattedTextField.prototype.selectionDirection = DIRECTION.NONE;

    function FormattedTextField(element) {
      this.element = element;
      this.click = __bind(this.click, this);

      this.keyUp = __bind(this.keyUp, this);

      this.keyPress = __bind(this.keyPress, this);

      this.keyDown = __bind(this.keyDown, this);

      this.afterInterceptorKeyUp = __bind(this.afterInterceptorKeyUp, this);

      this.beforeInterceptorKeyUp = __bind(this.beforeInterceptorKeyUp, this);

      this.element.on('keydown', this.keyDown);
      this.element.on('keypress', this.keyPress);
      this.element.on('keyup', this.keyUp);
      this.element.on('click', this.click);
      this.element.data('formatted-text-field', this);
      this.createTabInterceptors();
    }

    FormattedTextField.prototype.createTabInterceptors = function() {
      var afterInterceptor, beforeInterceptor, createInterceptor, input;
      input = this.element.get(0);
      createInterceptor = function() {
        var interceptor;
        interceptor = input.ownerDocument.createElement('input');
        interceptor.style.position = 'absolute';
        interceptor.style.top = '0';
        interceptor.style.left = '0';
        interceptor.style.opacity = 0;
        interceptor.style.zIndex = -9999;
        interceptor.style.pointerEvents = 'none';
        interceptor.className = 'formatted-text-field-interceptor';
        return interceptor;
      };
      beforeInterceptor = createInterceptor();
      beforeInterceptor.onkeyup = this.beforeInterceptorKeyUp;
      input.parentNode.insertBefore(beforeInterceptor, input);
      afterInterceptor = createInterceptor();
      afterInterceptor.onkeyup = this.afterInterceptorKeyUp;
      if (input.nextSibling) {
        return input.parentNode.insertBefore(afterInterceptor, input.nextSibling);
      } else {
        return input.parentNode.appendChild(afterInterceptor);
      }
    };

    FormattedTextField.prototype.beforeInterceptorKeyUp = function(event) {
      var previousField;
      if (event.keyCode === KEYS.TAB && event.shiftKey) {
        if (previousField = findFieldPreceding(event.target)) {
          return makeFirstResponder(previousField);
        }
      }
    };

    FormattedTextField.prototype.afterInterceptorKeyUp = function(event) {
      var nextField;
      if (event.keyCode === KEYS.TAB && !event.shiftKey) {
        if (nextField = findFieldFollowing(event.target)) {
          return makeFirstResponder(nextField);
        }
      }
    };

    FormattedTextField.prototype.insertCharacter = function(event) {
      var caret;
      event.preventDefault();
      if (this.hasSelection) {
        this.clearSelection();
      }
      if (this.formatter.length && this.text.length >= this.formatter.length) {
        return;
      }
      this.replaceSelection(String.fromCharCode(event.charCode));
      caret = this.caret;
      caret.start = caret.end;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveUp = function(event) {
      event.preventDefault();
      return this.caret = {
        start: 0,
        end: 0
      };
    };

    FormattedTextField.prototype.moveToBeginningOfParagraph = function(event) {
      return this.moveUp(event);
    };

    FormattedTextField.prototype.moveUpAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
        case DIRECTION.NONE:
          caret.start = 0;
          break;
        case DIRECTION.RIGHT:
          caret.end = caret.start;
          caret.start = 0;
      }
      this.selectionDirection = DIRECTION.LEFT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveParagraphBackwardAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
        case DIRECTION.NONE:
          caret.start = 0;
          break;
        case DIRECTION.RIGHT:
          caret.end = caret.start;
      }
      this.selectionDirection = DIRECTION.LEFT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveToBeginningOfDocument = function(event) {
      return this.moveToBeginningOfLine(event);
    };

    FormattedTextField.prototype.moveToBeginningOfDocumentAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      caret.start = 0;
      this.selectionDirection = DIRECTION.LEFT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveDown = function(event) {
      var end;
      event.preventDefault();
      end = this.text.length;
      return this.caret = {
        start: end,
        end: end
      };
    };

    FormattedTextField.prototype.moveToEndOfParagraph = function(event) {
      return this.moveDown(event);
    };

    FormattedTextField.prototype.moveDownAndModifySelection = function(event) {
      var caret, end;
      event.preventDefault();
      caret = this.caret;
      end = this.text.length;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
          caret.start = caret.end;
          caret.end = end;
          break;
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          caret.end = end;
      }
      this.selectionDirection = DIRECTION.RIGHT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveParagraphForwardAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          caret.end = this.text.length;
          break;
        case DIRECTION.LEFT:
          caret.start = caret.end;
      }
      this.selectionDirection = DIRECTION.RIGHT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveToEndOfDocument = function(event) {
      return this.moveToEndOfLine(event);
    };

    FormattedTextField.prototype.moveToEndOfDocumentAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      caret.end = this.text.length;
      this.selectionDirection = DIRECTION.RIGHT;
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveLeft = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      if (this.hasSelection) {
        caret.end = caret.start;
      } else {
        caret.start--;
        caret.end--;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveLeftAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.LEFT;
          caret.start--;
          break;
        case DIRECTION.RIGHT:
          caret.end--;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveWordLeft = function(event) {
      var index;
      event.preventDefault();
      index = this.lastWordBreakBeforeIndex(this.caret.start - 1);
      return this.caret = {
        start: index,
        end: index
      };
    };

    FormattedTextField.prototype.moveWordLeftAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.LEFT;
          caret.start = this.lastWordBreakBeforeIndex(caret.start - 1);
          break;
        case DIRECTION.RIGHT:
          caret.end = this.lastWordBreakBeforeIndex(caret.end);
          if (caret.end < caret.start) {
            caret.end = caret.start;
          }
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveToBeginningOfLine = function(event) {
      event.preventDefault();
      return this.caret = {
        start: 0,
        end: 0
      };
    };

    FormattedTextField.prototype.moveToBeginningOfLineAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.LEFT;
          caret.start = 0;
          break;
        case DIRECTION.RIGHT:
          caret.end = caret.start;
          caret.start = 0;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveRight = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      if (this.hasSelection) {
        caret.start = caret.end;
      } else {
        caret.start++;
        caret.end++;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveRightAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
          caret.start++;
          break;
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.RIGHT;
          caret.end++;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveWordRight = function(event) {
      var index;
      event.preventDefault();
      index = this.nextWordBreakAfterIndex(this.caret.end);
      return this.caret = {
        start: index,
        end: index
      };
    };

    FormattedTextField.prototype.moveWordRightAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
          caret.start = this.nextWordBreakAfterIndex(caret.start);
          if (caret.start > caret.end) {
            caret.start = caret.end;
          }
          break;
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.RIGHT;
          caret.end = this.nextWordBreakAfterIndex(caret.end);
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.moveToEndOfLine = function(event) {
      var text;
      event.preventDefault();
      text = this.text;
      return this.caret = {
        start: text.length,
        end: text.length
      };
    };

    FormattedTextField.prototype.moveToEndOfLineAndModifySelection = function(event) {
      var caret;
      event.preventDefault();
      caret = this.caret;
      switch (this.selectionDirection) {
        case DIRECTION.RIGHT:
        case DIRECTION.NONE:
          this.selectionDirection = DIRECTION.RIGHT;
          caret.end = this.text.length;
          break;
        case DIRECTION.LEFT:
          caret.start = caret.end;
          caret.end = this.text.length;
      }
      return this.caret = caret;
    };

    FormattedTextField.prototype.deleteBackward = function(event) {
      var caret;
      event.preventDefault();
      if (!this.hasSelection) {
        caret = this.caret;
        caret.start--;
        this.caret = caret;
      }
      return this.clearSelection();
    };

    FormattedTextField.prototype.deleteWordBackward = function(event) {
      var caret;
      if (this.hasSelection) {
        return this.deleteBackward(event);
      }
      event.preventDefault();
      caret = this.caret;
      caret.start = this.lastWordBreakBeforeIndex(caret.start);
      this.caret = caret;
      return this.clearSelection();
    };

    FormattedTextField.prototype.deleteBackwardByDecomposingPreviousCharacter = function(event) {
      return this.deleteBackward(event);
    };

    FormattedTextField.prototype.deleteBackwardToBeginningOfLine = function(event) {
      var caret;
      if (this.hasSelection) {
        return this.deleteBackward(event);
      }
      event.preventDefault();
      caret = this.caret;
      caret.start = 0;
      this.caret = caret;
      return this.clearSelection();
    };

    FormattedTextField.prototype.deleteForward = function(event) {
      var caret;
      event.preventDefault();
      if (!this.hasSelection) {
        caret = this.caret;
        caret.end++;
        this.caret = caret;
      }
      return this.clearSelection();
    };

    FormattedTextField.prototype.deleteWordForward = function(event) {
      var caret;
      if (this.hasSelection) {
        return this.deleteForward(event);
      }
      caret = this.caret;
      event.preventDefault();
      caret.end = this.nextWordBreakAfterIndex(caret.end);
      this.caret = caret;
      return this.clearSelection();
    };

    FormattedTextField.prototype.insertTab = function(event) {};

    FormattedTextField.prototype.insertBackTab = function(event) {};

    FormattedTextField.prototype.becomeFirstResponder = function(event) {
      var _this = this;
      this.element.focus();
      return this.rollbackInvalidChanges(function() {
        return _this.element.select();
      });
    };

    FormattedTextField.prototype.resignFirstResponder = function(event) {
      event.preventDefault();
      this.element.blur();
      return $('#no-selection-test').focus();
    };

    FormattedTextField.prototype.__defineGetter__('hasSelection', function() {
      var caret;
      caret = this.caret;
      return caret.start !== caret.end;
    });

    FormattedTextField.prototype.lastWordBreakBeforeIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.leftWordBreakIndexes;
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index > wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    FormattedTextField.prototype.__defineGetter__('leftWordBreakIndexes', function() {
      var i, result, text, _i, _ref;
      result = [];
      text = this.text;
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!isWordChar(text[i - 1]) && isWordChar(text[i])) {
          result.push(i);
        }
      }
      return result;
    });

    FormattedTextField.prototype.nextWordBreakAfterIndex = function(index) {
      var indexes, result, wordBreakIndex, _i, _len;
      indexes = this.rightWordBreakIndexes.reverse();
      result = indexes[0];
      for (_i = 0, _len = indexes.length; _i < _len; _i++) {
        wordBreakIndex = indexes[_i];
        if (index < wordBreakIndex) {
          result = wordBreakIndex;
        } else {
          break;
        }
      }
      return result;
    };

    FormattedTextField.prototype.__defineGetter__('rightWordBreakIndexes', function() {
      var i, result, text, _i, _ref;
      result = [];
      text = this.text;
      for (i = _i = 0, _ref = text.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (isWordChar(text[i]) && !isWordChar(text[i + 1])) {
          result.push(i + 1);
        }
      }
      return result;
    });

    FormattedTextField.prototype.clearSelection = function() {
      return this.replaceSelection('');
    };

    FormattedTextField.prototype.replaceSelection = function(replacement) {
      var caret, text;
      caret = this.caret;
      text = this.text;
      text = text.substring(0, caret.start) + replacement + text.substring(caret.end);
      caret.end = caret.start + replacement.length;
      this.text = text;
      this.caret = caret;
      return this.selectionDirection = DIRECTION.NONE;
    };

    FormattedTextField.prototype.selectAll = function(event) {
      var text;
      event.preventDefault();
      text = this.text;
      this.caret = {
        start: 0,
        end: text.length
      };
      return this.selectionDirection = DIRECTION.NONE;
    };

    FormattedTextField.prototype.keyDown = function(event) {
      var _this = this;
      return this.rollbackInvalidChanges(function() {
        var altKey, ctrlKey, keyCode, metaKey, modifiers, shiftKey;
        keyCode = event.keyCode, metaKey = event.metaKey, ctrlKey = event.ctrlKey, shiftKey = event.shiftKey, altKey = event.altKey;
        modifiers = [];
        if (altKey) {
          modifiers.push('alt');
        }
        if (ctrlKey) {
          modifiers.push('ctrl');
        }
        if (metaKey) {
          modifiers.push('meta');
        }
        if (shiftKey) {
          modifiers.push('shift');
        }
        modifiers = modifiers.join('+');
        if ((metaKey || ctrlKey) && keyCode === KEYS.A) {
          _this.selectAll(event);
        } else if (keyCode === KEYS.LEFT) {
          switch (modifiers) {
            case '':
              _this.moveLeft(event);
              break;
            case 'alt':
              _this.moveWordLeft(event);
              break;
            case 'shift':
              _this.moveLeftAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveWordLeftAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToBeginningOfLine(event);
              break;
            case 'meta+shift':
              _this.moveToBeginningOfLineAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled left+" + modifiers);
          }
        } else if (keyCode === KEYS.RIGHT) {
          switch (modifiers) {
            case '':
              _this.moveRight(event);
              break;
            case 'alt':
              _this.moveWordRight(event);
              break;
            case 'shift':
              _this.moveRightAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveWordRightAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToEndOfLine(event);
              break;
            case 'meta+shift':
              _this.moveToEndOfLineAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled right+" + modifiers);
          }
        } else if (keyCode === KEYS.UP) {
          switch (modifiers) {
            case '':
              _this.moveUp(event);
              break;
            case 'alt':
              _this.moveToBeginningOfParagraph(event);
              break;
            case 'shift':
              _this.moveUpAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveParagraphBackwardAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToBeginningOfDocument(event);
              break;
            case 'meta+shift':
              _this.moveToBeginningOfDocumentAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled up+" + modifiers);
          }
        } else if (keyCode === KEYS.DOWN) {
          switch (modifiers) {
            case '':
              _this.moveDown(event);
              break;
            case 'alt':
              _this.moveToEndOfParagraph(event);
              break;
            case 'shift':
              _this.moveDownAndModifySelection(event);
              break;
            case 'alt+shift':
              _this.moveParagraphForwardAndModifySelection(event);
              break;
            case 'meta':
              _this.moveToEndOfDocument(event);
              break;
            case 'meta+shift':
              _this.moveToEndOfDocumentAndModifySelection(event);
              break;
            default:
              throw new Error("unhandled down+" + modifiers);
          }
        } else if (keyCode === KEYS.BACKSPACE) {
          switch (modifiers) {
            case '':
              _this.deleteBackward(event);
              break;
            case 'alt':
            case 'alt+shift':
              _this.deleteWordBackward(event);
              break;
            case 'ctrl':
            case 'ctrl+shift':
              _this.deleteBackwardByDecomposingPreviousCharacter(event);
              break;
            case 'meta':
            case 'meta+shift':
              _this.deleteBackwardToBeginningOfLine(event);
              break;
            default:
              throw new Error("unhandled backspace+" + modifiers);
          }
        } else if (keyCode === KEYS.DELETE) {
          if (altKey) {
            _this.deleteWordForward(event);
          } else {
            _this.deleteForward(event);
          }
        } else if (keyCode === KEYS.TAB) {
          if (shiftKey) {
            _this.insertBackTab(event);
          } else {
            _this.insertTab(event);
          }
        }
        return null;
      });
    };

    FormattedTextField.prototype.keyPress = function(event) {
      var _this = this;
      return this.rollbackInvalidChanges(function() {
        return _this.insertCharacter(event);
      });
    };

    FormattedTextField.prototype.keyUp = function(event) {
      var _this = this;
      return this.rollbackInvalidChanges(function() {
        if (event.keyCode === KEYS.TAB) {
          return _this.selectAll(event);
        }
      });
    };

    FormattedTextField.prototype.rollbackInvalidChanges = function(callback) {
      var change, ctext, deleted, i, inserted, ptext, result, sharedPrefixLength, sharedSuffixLength, _i, _j, _ref, _ref1;
      change = {
        field: this,
        current: {
          caret: this.caret,
          text: this.text
        }
      };
      result = callback();
      change.proposed = {
        caret: this.caret,
        text: this.text
      };
      if (change.proposed.text !== change.current.text) {
        ctext = change.current.text;
        ptext = change.proposed.text;
        sharedPrefixLength = ctext.length;
        sharedSuffixLength = 0;
        for (i = _i = 0, _ref = ctext.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (ptext[i] !== ctext[i]) {
            sharedPrefixLength = i;
            break;
          }
        }
        for (i = _j = 0, _ref1 = ctext.length - sharedPrefixLength; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
          if (ptext[ptext.length - 1 - i] !== ctext[ctext.length - 1 - i]) {
            sharedSuffixLength = i;
            break;
          }
        }
        inserted = {
          start: sharedPrefixLength,
          end: ptext.length - sharedSuffixLength
        };
        deleted = {
          start: sharedPrefixLength,
          end: ctext.length - sharedSuffixLength
        };
        inserted.text = ptext.substring(inserted.start, inserted.end);
        deleted.text = ctext.substring(deleted.start, deleted.end);
        change.inserted = inserted;
        change.deleted = deleted;
      } else {
        change.inserted = {
          start: change.proposed.caret.start,
          end: change.proposed.caret.end,
          text: ''
        };
        change.deleted = {
          start: change.current.caret.start,
          end: change.current.caret.end,
          text: ''
        };
      }
      if (typeof this.formatter.isChangeValid === 'function') {
        if (this.formatter.isChangeValid(change)) {
          this.text = change.proposed.text;
          this.caret = change.proposed.caret;
        } else {
          this.text = change.current.text;
          this.caret = change.current.caret;
        }
      }
      return result;
    };

    FormattedTextField.prototype.click = function(event) {
      return this.selectionDirection = DIRECTION.NONE;
    };

    FormattedTextField.prototype.on = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).on.apply(_ref, args);
    };

    FormattedTextField.prototype.off = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.element).off.apply(_ref, args);
    };

    FormattedTextField.prototype.__defineGetter__('text', function() {
      return this.element.val();
    });

    FormattedTextField.prototype.__defineSetter__('text', function(text) {
      return this.element.val(text);
    });

    FormattedTextField.prototype.__defineGetter__('value', function() {
      var value;
      value = this.element.val();
      if (!this._formatter) {
        return value;
      }
      return this._formatter.parse(value);
    });

    FormattedTextField.prototype.__defineSetter__('value', function(value) {
      if (this._formatter) {
        value = this._formatter.format(value);
      }
      this.element.val("" + value);
      return this.element.trigger('change');
    });

    FormattedTextField.prototype.__defineGetter__('formatter', function() {
      return this._formatter;
    });

    FormattedTextField.prototype.__defineSetter__('formatter', function(formatter) {
      var value;
      value = this.value;
      this._formatter = formatter;
      return this.value = value;
    });

    FormattedTextField.prototype.__defineGetter__('caret', function() {
      var end, start, _ref;
      _ref = this.element.caret(), start = _ref.start, end = _ref.end;
      return {
        start: start,
        end: end
      };
    });

    FormattedTextField.prototype.__defineSetter__('caret', function(caret) {
      var max, min;
      min = 0;
      max = this.text.length;
      caret = {
        start: Math.max(min, Math.min(max, caret.start)),
        end: Math.max(min, Math.min(max, caret.end))
      };
      this.element.caret(caret);
      if (caret.start === caret.end) {
        return this.selectionDirection = DIRECTION.NONE;
      }
    });

    FormattedTextField.prototype.__defineGetter__('selectionAnchor', function() {
      switch (this.selectionDirection) {
        case DIRECTION.LEFT:
          return this.caret.end;
        case DIRECTION.RIGHT:
          return this.caret.start;
        default:
          return null;
      }
    });

    return FormattedTextField;

  })();

  if (typeof module !== "undefined" && module !== null) {
    module.exports = FormattedTextField;
  } else if (typeof window !== "undefined" && window !== null) {
    window.FormattedTextField = FormattedTextField;
  }

}).call(this);
