// Generated by CoffeeScript 1.4.0
(function() {
  var DelimitedTextFormatter, Formatter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Formatter = require('./formatter');

  DelimitedTextFormatter = (function(_super) {

    __extends(DelimitedTextFormatter, _super);

    DelimitedTextFormatter.prototype.delimiter = null;

    function DelimitedTextFormatter(delimiter) {
      var _ref;
      if (delimiter == null) {
        delimiter = this.delimiter;
      }
      this.delimiter = delimiter;
      if (((_ref = this.delimiter) != null ? _ref.length : void 0) !== 1) {
        throw new Error('delimiter must have just one character');
      }
    }

    DelimitedTextFormatter.prototype.format = function(value) {
      return this._textFromValue(value);
    };

    DelimitedTextFormatter.prototype._textFromValue = function(value) {
      var char, result, _i, _len;
      if (!value) {
        return '';
      }
      result = '';
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        char = value[_i];
        if (this.hasDelimiterAtIndex(result.length)) {
          result += this.delimiter;
        }
        result += char;
        if (this.hasDelimiterAtIndex(result.length)) {
          result += this.delimiter;
        }
      }
      return result;
    };

    DelimitedTextFormatter.prototype.parse = function(text, error) {
      return this._valueFromText(text);
    };

    DelimitedTextFormatter.prototype._valueFromText = function(text) {
      var char;
      if (!text) {
        return '';
      }
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = text.length; _i < _len; _i++) {
          char = text[_i];
          if (char !== this.delimiter) {
            _results.push(char);
          }
        }
        return _results;
      }).call(this)).join('');
    };

    DelimitedTextFormatter.prototype.isChangeValid = function(change, error) {
      var endMovedLeft, hasSelection, isChangeValid, newText, range, startMovedLeft, value;
      if (!DelimitedTextFormatter.__super__.isChangeValid.call(this, change, error)) {
        return false;
      }
      newText = change.proposed.text;
      if (change.deleted.text === this.delimiter) {
        newText = newText.substring(0, change.deleted.start - 1) + newText.substring(change.deleted.end - 1);
      }
      range = change.proposed.selectedRange;
      hasSelection = range.length !== 0;
      startMovedLeft = range.start < change.current.selectedRange.start;
      endMovedLeft = (range.start + range.length) < (change.current.selectedRange.start + change.current.selectedRange.length);
      if (this.hasDelimiterAtIndex(range.start)) {
        if (startMovedLeft) {
          range.start--;
          range.length++;
        } else {
          range.start++;
          range.length--;
        }
      }
      if (this.hasDelimiterAtIndex(0) && range.start === 1) {
        if (startMovedLeft) {
          range.start--;
          range.length++;
        } else {
          range.start++;
          range.length--;
        }
      }
      if (hasSelection) {
        if (this.hasDelimiterAtIndex(range.start + range.length - 1)) {
          if (startMovedLeft || endMovedLeft) {
            range.length--;
          } else {
            range.length++;
          }
        }
      } else {
        range.length = 0;
      }
      isChangeValid = true;
      value = this._valueFromText(newText, function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        isChangeValid = false;
        return error.apply(null, args);
      });
      if (isChangeValid) {
        change.proposed.text = this._textFromValue(value);
      }
      return isChangeValid;
    };

    return DelimitedTextFormatter;

  })(Formatter);

  module.exports = DelimitedTextFormatter;

}).call(this);
