// Generated by CoffeeScript 1.4.0
(function() {
  var DelimitedTextFormatter, Formatter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof require !== "undefined" && require !== null) {
    Formatter = require('./formatter');
  } else {
    Formatter = this.FieldKit.Formatter;
  }

  DelimitedTextFormatter = (function(_super) {

    __extends(DelimitedTextFormatter, _super);

    DelimitedTextFormatter.prototype.delimiter = null;

    function DelimitedTextFormatter(delimiter) {
      var _ref;
      this.delimiter = delimiter;
      if (((_ref = this.delimiter) != null ? _ref.length : void 0) !== 1) {
        throw new Error('delimiter must have just one character');
      }
    }

    DelimitedTextFormatter.prototype.format = function(text) {
      var char, result, _i, _len;
      if (!text) {
        return '';
      }
      result = '';
      for (_i = 0, _len = text.length; _i < _len; _i++) {
        char = text[_i];
        if (this.hasDelimiterAtIndex(result.length)) {
          result += this.delimiter;
        }
        result += char;
        if (this.hasDelimiterAtIndex(result.length)) {
          result += this.delimiter;
        }
      }
      return result;
    };

    DelimitedTextFormatter.prototype.parse = function(text) {
      var char;
      if (!text) {
        return null;
      }
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = text.length; _i < _len; _i++) {
          char = text[_i];
          if (char !== this.delimiter) {
            _results.push(char);
          }
        }
        return _results;
      }).call(this)).join('');
    };

    DelimitedTextFormatter.prototype.isChangeValid = function(change) {
      var caret, endMovedLeft, hasSelection, newText, startMovedLeft;
      if (!DelimitedTextFormatter.__super__.isChangeValid.call(this, change)) {
        return false;
      }
      newText = change.proposed.text;
      if (change.deleted.text === this.delimiter) {
        newText = newText.substring(0, newText.length - 1);
      }
      caret = change.proposed.caret;
      hasSelection = caret.start !== caret.end;
      startMovedLeft = caret.start < change.current.caret.start;
      endMovedLeft = caret.end < change.current.caret.end;
      if (this.hasDelimiterAtIndex(caret.start)) {
        if (startMovedLeft) {
          caret.start--;
        } else {
          caret.start++;
        }
      }
      if (hasSelection) {
        if (this.hasDelimiterAtIndex(caret.end - 1)) {
          if (startMovedLeft || endMovedLeft) {
            caret.end--;
          } else {
            caret.end++;
          }
        }
      } else {
        caret.end = caret.start;
      }
      newText = this.format(this.parse(newText));
      change.proposed.text = newText;
      return true;
    };

    return DelimitedTextFormatter;

  })(Formatter);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = DelimitedTextFormatter;
  } else {
    (this.FieldKit || (this.FieldKit = {})).DelimitedTextFormatter = DelimitedTextFormatter;
  }

}).call(this);
